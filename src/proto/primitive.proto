syntax = "proto3";

package TbotsProto;

import "proto/geometry.proto";

enum BallCollisionType
{
    ALLOW = 0;
    AVOID = 1;
}

enum DribblerMode
{
    OFF        = 0;
    INDEFINITE = 1;
    MAX_FORCE  = 2;
}

enum MaxAllowedSpeedMode
{
    // The physical limit of the robots
    PHYSICAL_LIMIT = 0;
    // Move at speed limit for the stop command
    STOP_COMMAND = 1;
    // Move at speed at which collisions are allowed
    COLLISIONS_ALLOWED = 2;
}

message AutoChipOrKick
{
    oneof auto_chip_or_kick
    {
        float autokick_speed_m_per_s   = 1;
        float autochip_distance_meters = 2;
    };
}

message PowerControl
{
    message ChickerControl
    {
        oneof chicker_command
        {
            float kick_speed_m_per_s         = 1;
            float chip_distance_meters       = 2;
            AutoChipOrKick auto_chip_or_kick = 3;
        };
    }

    message GenevaControl
    {
        float angle_deg          = 1;
        float rotation_speed_rpm = 2;
    }

    enum ChargeMode
    {
        DISCHARGE = 0;
        CHARGE    = 1;
        FLOAT     = 2;
    }

    ChickerControl chicker = 1;
    GenevaControl geneva   = 2;
    ChargeMode charge_mode = 3;
}

message Primitive
{
    oneof primitive
    {
        EstopPrimitive estop                  = 1;
        MovePrimitive move                    = 2;
        StopPrimitive stop                    = 3;
        DirectControlPrimitive direct_control = 4;
    }
}

message EstopPrimitive {}

message MovePrimitive
{
    Path path                        = 1;
    float final_speed_m_per_s        = 2;
    Angle final_angle                = 3;
    float dribbler_speed_rpm         = 4;
    float max_speed_m_per_s          = 5;
    AutoChipOrKick auto_chip_or_kick = 6;
    float target_spin_rev_per_s      = 7;
}

message StopPrimitive
{
    enum StopType
    {
        BRAKE = 0;
        COAST = 1;
    }
    StopType stop_type = 1;
}

message DirectControlPrimitive
{
    message DirectPerWheelControl
    {
        float front_left_wheel_rpm  = 1;
        float back_left_wheel_rpm   = 2;
        float front_right_wheel_rpm = 3;
        float back_right_wheel_rpm  = 4;
    }

    message DirectVelocityControl
    {
        Vector velocity                  = 1;
        AngularVelocity angular_velocity = 2;
    }

    oneof wheel_control
    {
        DirectPerWheelControl direct_per_wheel_control = 1;
        DirectVelocityControl direct_velocity_control  = 2;
    }

    PowerControl power       = 3;
    float dribbler_speed_rpm = 4;
}
