syntax = "proto3";

package TbotsProto;

import "proto/tbots_timestamp_msg.proto";
import "proto/geneva_slot.proto";
import "proto/geometry.proto";

message RobotStatus
{
    uint32 robot_id                           = 1;
    repeated ErrorCode error_code             = 2;
    ChipperKickerStatus chipper_kicker_status = 4;
    MotorStatus motor_status                  = 5;
    NetworkStatus network_status              = 6;
    PowerStatus power_status                  = 7;
    JetsonStatus jetson_status                = 8;
    ThunderloopStatus thunderloop_status      = 9;
    Timestamp time_sent                       = 10;
    uint64 last_handled_primitive_set         = 11;
}

message ThunderloopStatus
{
    double network_service_poll_time_ms     = 1;
    double primitive_executor_start_time_ms = 2;
    double primitive_executor_step_time_ms  = 3;
    double motor_service_poll_time_ms       = 4;
    double power_service_poll_time_ms       = 5;
    double iteration_time_ms                = 6;
}

message JetsonStatus
{
    // Jetson CPU temperature
    double cpu_temperature = 3;
}

/* Data about the status of the chipper and kicker */
message ChipperKickerStatus
{
    // Indicates the time elapsed since chipper was last fired in ms
    double ms_since_chipper_fired = 1;

    // Indicates the time elapsed since kicker was last fired in ms
    double ms_since_kicker_fired = 2;
}

/* Data about the status of the dribbler
 * Note that the rotation is from the perspective of rear of the motor,
 * looking down the shaft starting from the motor body
 */
message DribblerStatus
{
    // The current speed of the dribbler in RPM
    float dribbler_rpm = 1;

    // Dribbler temperature
    float dribbler_temperature = 2;

    repeated MotorFault motor_faults = 3;
    bool enabled                     = 4;
}

/* Error codes are to be displayed in the visualizer */
enum ErrorCode
{
    // Default message required for proto enums
    NO_ERROR = 0;

    // Level triggered events
    LOW_CAP            = 1;
    LOW_BATTERY        = 2;
    HIGH_BOARD_TEMP    = 3;
    DRIBBLER_MOTOR_HOT = 4;
}

enum MotorFault
{
    // Refer to Trinamic 6100 datasheet for precise definitions of motor faults.
    // https://trinamic.com/fileadmin/assets/Products/ICs_Documents/TMC6100_datasheet_Rev1.00.pdf
    // (Section 5.1, p22-23)
    RESET                             = 0;
    DRIVER_OVERTEMPERATURE_PREWARNING = 1;
    DRIVER_OVERTEMPERATURE            = 2;
    UNDERVOLTAGE_CHARGEPUMP           = 3;
    PHASE_U_SHORT_COUNTER_DETECTED    = 4;
    PHASE_U_SHORT_TO_GND_DETECTED     = 5;
    PHASE_U_SHORT_TO_VS_DETECTED      = 6;
    // for the sake of consistency with the TMC 6100, "7" is unused
    PHASE_V_SHORT_COUNTER_DETECTED = 8;
    PHASE_V_SHORT_TO_GND_DETECTED  = 9;
    PHASE_V_SHORT_TO_VS_DETECTED   = 10;
    // for the sake of consistency with the TMC 6100, "11" is unused
    PHASE_W_SHORT_COUNTER_DETECTED = 12;
    PHASE_W_SHORT_TO_GND_DETECTED  = 13;
    PHASE_W_SHORT_TO_VS_DETECTED   = 14;
}

message DriveUnit
{
    // The current RPM of the wheel
    float wheel_velocity = 1;

    repeated MotorFault motor_faults = 2;
    bool enabled = 3;  // certain drive faults cause the motor to be disabled
}

/* Data from all four drive units and the dribbler */
message MotorStatus
{
    DriveUnit front_left             = 1;
    DriveUnit front_right            = 2;
    DriveUnit back_left              = 3;
    DriveUnit back_right             = 4;
    DribblerStatus dribbler          = 5;
    Vector local_velocity            = 6;
    AngularVelocity angular_velocity = 7;
}

/* Data about the network connection with the robots, including network-derived values */
message NetworkStatus
{
    // Indicates the time elapsed since the last vision packet was received in ms
    double ms_since_last_vision_received = 1;

    // Indicates the time elapsed since the last primitive packet was received in ms
    double ms_since_last_primitive_received = 2;
}

/* Battery and capacitor voltages */
message PowerStatus
{
    // The voltage on the robot’s battery, in volts.
    float battery_voltage   = 1;
    float capacitor_voltage = 2;
    // voltage on the robot’s capacitor, in volts.
    float current_draw      = 3;
    Geneva.Slot geneva_slot = 4;
    uint32 sequence_num     = 5;
    bool breakbeam_tripped  = 6;
}
