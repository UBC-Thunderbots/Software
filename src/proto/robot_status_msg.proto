syntax = "proto3";

package TbotsProto;

import "proto/tbots_timestamp_msg.proto";
import "proto/geneva_slot.proto";
import "proto/geometry.proto";

message RobotStatus
{
    uint32 robot_id                           = 1;
    repeated ErrorCode error_code             = 2;
    ChipperKickerStatus chipper_kicker_status = 4;
    MotorStatus motor_status                  = 5;
    NetworkStatus network_status              = 6;
    PowerStatus power_status                  = 7;
    JetsonStatus jetson_status                = 8;
    ThunderloopStatus thunderloop_status      = 9;
    Timestamp time_sent                       = 10;
    uint64 last_handled_primitive_set         = 11;
}

message ThunderloopStatus
{
    uint64 network_service_poll_time_ns     = 1;
    uint64 primitive_executor_start_time_ns = 2;
    uint64 primitive_executor_step_time_ns  = 3;
    uint64 motor_service_poll_time_ns       = 4;
    uint64 power_service_poll_time_ns       = 5;
    uint64 iteration_time_ns                = 6;
}

message JetsonStatus
{
    // Jetson CPU temperature
    double cpu_temperature = 3;
}

/* Data about the status of the chipper and kicker */
message ChipperKickerStatus
{
    // Indicates the time elapsed since chipper was last fired in ms
    // UINT64_MAX indicates chipper was never fired
    uint32 ms_since_chipper_fired = 1;

    // Indicates the time elapsed since kicker was last fired in ms
    // UINT64_MAX indicates kicker was never fired
    uint32 ms_since_kicker_fired = 2;
}

/* Data about the status of the dribbler
 * Note that the rotation is from the perspective of rear of the motor,
 * looking down the shaft starting from the motor body
 */
message DribblerStatus
{
    // The current speed of the dribbler in RPM
    float dribbler_rpm = 1;

    // Dribbler temperature
    float dribbler_temperature = 2;
}

/* Error codes are to be displayed in the visualizer */
enum ErrorCode
{
    // Default message required for proto enums
    NO_ERROR = 0;

    // Level triggered events
    LOW_CAP            = 1;
    LOW_BATTERY        = 2;
    HIGH_BOARD_TEMP    = 3;
    DRIBBLER_MOTOR_HOT = 4;
}

message DriveUnit
{
    // The current RPM of the wheel
    float wheel_velocity = 1;
}

/* Data from all four drive units and the dribbler */
message MotorStatus
{
    DriveUnit front_left    = 1;
    DriveUnit front_right   = 2;
    DriveUnit back_left     = 3;
    DriveUnit back_right    = 4;
    DribblerStatus dribbler = 5;
    Vector local_velocity   = 6;
}

/* Data about the network connection with the robots, including network-derived values */
message NetworkStatus
{
    // Indicates the time elapsed since the last vision packet was received in ms
    // UINT64_MAX indicates no vision packet was ever received
    uint32 ms_since_last_vision_received = 1;

    // Indicates the time elapsed since the last primitive packet was received in ms
    // UINT64_MAX indicates no primitive packet was ever received
    uint32 ms_since_last_primitive_received = 2;
}

/* Battery and capacitor voltages */
message PowerStatus
{
    // The voltage on the robot’s battery, in volts.
    float battery_voltage   = 1;
    float capacitor_voltage = 2;
    // voltage on the robot’s capacitor, in volts.
    float current_draw      = 3;
    Geneva.Slot geneva_slot = 4;
    uint32 sequence_num     = 5;
    bool breakbeam_tripped  = 6;
}
