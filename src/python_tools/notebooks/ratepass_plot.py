{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 1,
            "id": "forbidden-orchestra",
            "metadata": {"lines_to_next_cell": 2},
            "outputs": [],
            "source": [
                "from software.proto.messages_robocup_ssl_wrapper_pb2 import SSL_WrapperPacket\n",
                "from python_tools.proto_log import ProtoLog\n",
                "import ipywidgets\n",
                "from IPython.display import display\n",
                "from software.python_bindings import world, passing\n",
                "import numpy as np\n",
                "\n",
                "wrapper_proto_log = ProtoLog(\n",
                '    "/home/jordan/log_ssl_wrapper_filtered_world_test/SensorFusion_SSL_WrapperPacket",\n',
                "    SSL_WrapperPacket,\n",
                ")",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "id": "economic-strand",
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "{'vision_flipping_filter_enabled': True,\n",
                            " 'ignore_invalid_camera_data': False,\n",
                            " 'min_valid_x': -10.0,\n",
                            " 'max_valid_x': 10.0,\n",
                            " 'friendly_goalie_id': 0,\n",
                            " 'enemy_goalie_id': 0,\n",
                            " 'override_game_controller_defending_side': True,\n",
                            " 'defending_positive_side': False,\n",
                            " 'friendly_color_yellow': True,\n",
                            " 'override_game_controller_friendly_goalie_id': True,\n",
                            " 'override_game_controller_enemy_goalie_id': True}",
                        ]
                    },
                    "execution_count": 2,
                    "metadata": {},
                    "output_type": "execute_result",
                }
            ],
            "source": ["world.getDefaultSensorFusionConfig()"],
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "id": "monthly-adoption",
            "metadata": {"lines_to_next_cell": 0, "scrolled": false},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "\n",
                            '    <div class="bk-root">\n',
                            '        <a href="https://bokeh.org" target="_blank" class="bk-logo bk-logo-small bk-logo-notebook"></a>\n',
                            '        <span id="15175">Loading BokehJS ...</span>\n',
                            "    </div>",
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data",
                },
                {
                    "data": {
                        "application/javascript": [
                            "\n",
                            "(function(root) {\n",
                            "  function now() {\n",
                            "    return new Date();\n",
                            "  }\n",
                            "\n",
                            "  var force = true;\n",
                            "\n",
                            '  if (typeof root._bokeh_onload_callbacks === "undefined" || force === true) {\n',
                            "    root._bokeh_onload_callbacks = [];\n",
                            "    root._bokeh_is_loading = undefined;\n",
                            "  }\n",
                            "\n",
                            "  var JS_MIME_TYPE = 'application/javascript';\n",
                            "  var HTML_MIME_TYPE = 'text/html';\n",
                            "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
                            "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
                            "\n",
                            "  /**\n",
                            "   * Render data to the DOM node\n",
                            "   */\n",
                            "  function render(props, node) {\n",
                            '    var script = document.createElement("script");\n',
                            "    node.appendChild(script);\n",
                            "  }\n",
                            "\n",
                            "  /**\n",
                            "   * Handle when an output is cleared or removed\n",
                            "   */\n",
                            "  function handleClearOutput(event, handle) {\n",
                            "    var cell = handle.cell;\n",
                            "\n",
                            "    var id = cell.output_area._bokeh_element_id;\n",
                            "    var server_id = cell.output_area._bokeh_server_id;\n",
                            "    // Clean up Bokeh references\n",
                            "    if (id != null && id in Bokeh.index) {\n",
                            "      Bokeh.index[id].model.document.clear();\n",
                            "      delete Bokeh.index[id];\n",
                            "    }\n",
                            "\n",
                            "    if (server_id !== undefined) {\n",
                            "      // Clean up Bokeh references\n",
                            '      var cmd = "from bokeh.io.state import curstate; print(curstate().uuid_to_server[\'" + server_id + "\'].get_sessions()[0].document.roots[0]._id)";\n',
                            "      cell.notebook.kernel.execute(cmd, {\n",
                            "        iopub: {\n",
                            "          output: function(msg) {\n",
                            "            var id = msg.content.text.trim();\n",
                            "            if (id in Bokeh.index) {\n",
                            "              Bokeh.index[id].model.document.clear();\n",
                            "              delete Bokeh.index[id];\n",
                            "            }\n",
                            "          }\n",
                            "        }\n",
                            "      });\n",
                            "      // Destroy server and session\n",
                            '      var cmd = "import bokeh.io.notebook as ion; ion.destroy_server(\'" + server_id + "\')";\n',
                            "      cell.notebook.kernel.execute(cmd);\n",
                            "    }\n",
                            "  }\n",
                            "\n",
                            "  /**\n",
                            "   * Handle when a new output is added\n",
                            "   */\n",
                            "  function handleAddOutput(event, handle) {\n",
                            "    var output_area = handle.output_area;\n",
                            "    var output = handle.output;\n",
                            "\n",
                            "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
                            '    if ((output.output_type != "display_data") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n',
                            "      return\n",
                            "    }\n",
                            "\n",
                            "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
                            "\n",
                            '    if (output.metadata[EXEC_MIME_TYPE]["id"] !== undefined) {\n',
                            "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
                            "      // store reference to embed id on output_area\n",
                            '      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE]["id"];\n',
                            "    }\n",
                            '    if (output.metadata[EXEC_MIME_TYPE]["server_id"] !== undefined) {\n',
                            '      var bk_div = document.createElement("div");\n',
                            "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
                            "      var script_attrs = bk_div.children[0].attributes;\n",
                            "      for (var i = 0; i < script_attrs.length; i++) {\n",
                            "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
                            "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
                            "      }\n",
                            "      // store reference to server id on output_area\n",
                            '      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE]["server_id"];\n',
                            "    }\n",
                            "  }\n",
                            "\n",
                            "  function register_renderer(events, OutputArea) {\n",
                            "\n",
                            "    function append_mime(data, metadata, element) {\n",
                            "      // create a DOM node to render to\n",
                            "      var toinsert = this.create_output_subarea(\n",
                            "        metadata,\n",
                            "        CLASS_NAME,\n",
                            "        EXEC_MIME_TYPE\n",
                            "      );\n",
                            "      this.keyboard_manager.register_events(toinsert);\n",
                            "      // Render to node\n",
                            "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
                            "      render(props, toinsert[toinsert.length - 1]);\n",
                            "      element.append(toinsert);\n",
                            "      return toinsert\n",
                            "    }\n",
                            "\n",
                            "    /* Handle when an output is cleared or removed */\n",
                            "    events.on('clear_output.CodeCell', handleClearOutput);\n",
                            "    events.on('delete.Cell', handleClearOutput);\n",
                            "\n",
                            "    /* Handle when a new output is added */\n",
                            "    events.on('output_added.OutputArea', handleAddOutput);\n",
                            "\n",
                            "    /**\n",
                            "     * Register the mime type and append_mime function with output_area\n",
                            "     */\n",
                            "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
                            "      /* Is output safe? */\n",
                            "      safe: true,\n",
                            "      /* Index of renderer in `output_area.display_order` */\n",
                            "      index: 0\n",
                            "    });\n",
                            "  }\n",
                            "\n",
                            "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
                            "  if (root.Jupyter !== undefined) {\n",
                            "    var events = require('base/js/events');\n",
                            "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
                            "\n",
                            "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
                            "      register_renderer(events, OutputArea);\n",
                            "    }\n",
                            "  }\n",
                            "\n",
                            "  \n",
                            '  if (typeof (root._bokeh_timeout) === "undefined" || force === true) {\n',
                            "    root._bokeh_timeout = Date.now() + 5000;\n",
                            "    root._bokeh_failed_load = false;\n",
                            "  }\n",
                            "\n",
                            "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
                            "     \"<div style='background-color: #fdd'>\\n\"+\n",
                            '     "<p>\\n"+\n',
                            '     "BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n"+\n',
                            '     "may be due to a slow or bad network connection. Possible fixes:\\n"+\n',
                            '     "</p>\\n"+\n',
                            '     "<ul>\\n"+\n',
                            '     "<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n"+\n',
                            '     "<li>use INLINE resources instead, as so:</li>\\n"+\n',
                            '     "</ul>\\n"+\n',
                            '     "<code>\\n"+\n',
                            '     "from bokeh.resources import INLINE\\n"+\n',
                            '     "output_notebook(resources=INLINE)\\n"+\n',
                            '     "</code>\\n"+\n',
                            '     "</div>"}};\n',
                            "\n",
                            "  function display_loaded() {\n",
                            '    var el = document.getElementById("15175");\n',
                            "    if (el != null) {\n",
                            '      el.textContent = "BokehJS is loading...";\n',
                            "    }\n",
                            "    if (root.Bokeh !== undefined) {\n",
                            "      if (el != null) {\n",
                            '        el.textContent = "BokehJS " + root.Bokeh.version + " successfully loaded.";\n',
                            "      }\n",
                            "    } else if (Date.now() < root._bokeh_timeout) {\n",
                            "      setTimeout(display_loaded, 100)\n",
                            "    }\n",
                            "  }\n",
                            "\n",
                            "\n",
                            "  function run_callbacks() {\n",
                            "    try {\n",
                            "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
                            "        if (callback != null)\n",
                            "          callback();\n",
                            "      });\n",
                            "    } finally {\n",
                            "      delete root._bokeh_onload_callbacks\n",
                            "    }\n",
                            '    console.debug("Bokeh: all callbacks have finished");\n',
                            "  }\n",
                            "\n",
                            "  function load_libs(css_urls, js_urls, callback) {\n",
                            "    if (css_urls == null) css_urls = [];\n",
                            "    if (js_urls == null) js_urls = [];\n",
                            "\n",
                            "    root._bokeh_onload_callbacks.push(callback);\n",
                            "    if (root._bokeh_is_loading > 0) {\n",
                            '      console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());\n',
                            "      return null;\n",
                            "    }\n",
                            "    if (js_urls == null || js_urls.length === 0) {\n",
                            "      run_callbacks();\n",
                            "      return null;\n",
                            "    }\n",
                            '    console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());\n',
                            "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
                            "\n",
                            "    function on_load() {\n",
                            "      root._bokeh_is_loading--;\n",
                            "      if (root._bokeh_is_loading === 0) {\n",
                            '        console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");\n',
                            "        run_callbacks()\n",
                            "      }\n",
                            "    }\n",
                            "\n",
                            "    function on_error() {\n",
                            '      console.error("failed to load " + url);\n',
                            "    }\n",
                            "\n",
                            "    for (var i = 0; i < css_urls.length; i++) {\n",
                            "      var url = css_urls[i];\n",
                            '      const element = document.createElement("link");\n',
                            "      element.onload = on_load;\n",
                            "      element.onerror = on_error;\n",
                            '      element.rel = "stylesheet";\n',
                            '      element.type = "text/css";\n',
                            "      element.href = url;\n",
                            '      console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);\n',
                            "      document.body.appendChild(element);\n",
                            "    }\n",
                            "\n",
                            '    const hashes = {"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js": "T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js": "98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js": "89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8"};\n',
                            "\n",
                            "    for (var i = 0; i < js_urls.length; i++) {\n",
                            "      var url = js_urls[i];\n",
                            "      var element = document.createElement('script');\n",
                            "      element.onload = on_load;\n",
                            "      element.onerror = on_error;\n",
                            "      element.async = false;\n",
                            "      element.src = url;\n",
                            "      if (url in hashes) {\n",
                            '        element.crossOrigin = "anonymous";\n',
                            '        element.integrity = "sha384-" + hashes[url];\n',
                            "      }\n",
                            '      console.debug("Bokeh: injecting script tag for BokehJS library: ", url);\n',
                            "      document.head.appendChild(element);\n",
                            "    }\n",
                            "  };\n",
                            "\n",
                            "  function inject_raw_css(css) {\n",
                            '    const element = document.createElement("style");\n',
                            "    element.appendChild(document.createTextNode(css));\n",
                            "    document.body.appendChild(element);\n",
                            "  }\n",
                            "\n",
                            "  \n",
                            '  var js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js"];\n',
                            "  var css_urls = [];\n",
                            "  \n",
                            "\n",
                            "  var inline_js = [\n",
                            "    function(Bokeh) {\n",
                            '      Bokeh.set_log_level("info");\n',
                            "    },\n",
                            "    function(Bokeh) {\n",
                            "    \n",
                            "    \n",
                            "    }\n",
                            "  ];\n",
                            "\n",
                            "  function run_inline_js() {\n",
                            "    \n",
                            "    if (root.Bokeh !== undefined || force === true) {\n",
                            "      \n",
                            "    for (var i = 0; i < inline_js.length; i++) {\n",
                            "      inline_js[i].call(root, root.Bokeh);\n",
                            "    }\n",
                            "    if (force === true) {\n",
                            "        display_loaded();\n",
                            "      }} else if (Date.now() < root._bokeh_timeout) {\n",
                            "      setTimeout(run_inline_js, 100);\n",
                            "    } else if (!root._bokeh_failed_load) {\n",
                            '      console.log("Bokeh: BokehJS failed to load within specified timeout.");\n',
                            "      root._bokeh_failed_load = true;\n",
                            "    } else if (force !== true) {\n",
                            "      var cell = $(document.getElementById(\"15175\")).parents('.cell').data().cell;\n",
                            "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
                            "    }\n",
                            "\n",
                            "  }\n",
                            "\n",
                            "  if (root._bokeh_is_loading === 0) {\n",
                            '    console.debug("Bokeh: BokehJS loaded, going straight to plotting");\n',
                            "    run_inline_js();\n",
                            "  } else {\n",
                            "    load_libs(css_urls, js_urls, function() {\n",
                            '      console.debug("Bokeh: BokehJS plotting callback run at", now());\n',
                            "      run_inline_js();\n",
                            "    });\n",
                            "  }\n",
                            "}(window));",
                        ],
                        "application/vnd.bokehjs_load.v0+json": '\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === "undefined" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === "undefined" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {\'data\': {\'text/html\':\n     "<div style=\'background-color: #fdd\'>\\n"+\n     "<p>\\n"+\n     "BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n"+\n     "may be due to a slow or bad network connection. Possible fixes:\\n"+\n     "</p>\\n"+\n     "<ul>\\n"+\n     "<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n"+\n     "<li>use INLINE resources instead, as so:</li>\\n"+\n     "</ul>\\n"+\n     "<code>\\n"+\n     "from bokeh.resources import INLINE\\n"+\n     "output_notebook(resources=INLINE)\\n"+\n     "</code>\\n"+\n     "</div>"}};\n\n  function display_loaded() {\n    var el = document.getElementById("15175");\n    if (el != null) {\n      el.textContent = "BokehJS is loading...";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = "BokehJS " + root.Bokeh.version + " successfully loaded.";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug("Bokeh: all callbacks have finished");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error("failed to load " + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement("link");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = "stylesheet";\n      element.type = "text/css";\n      element.href = url;\n      console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js": "T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js": "98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js": "89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement(\'script\');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = "anonymous";\n        element.integrity = "sha384-" + hashes[url];\n      }\n      console.debug("Bokeh: injecting script tag for BokehJS library: ", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement("style");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level("info");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log("Bokeh: BokehJS failed to load within specified timeout.");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById("15175")).parents(\'.cell\').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug("Bokeh: BokehJS loaded, going straight to plotting");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug("Bokeh: BokehJS plotting callback run at", now());\n      run_inline_js();\n    });\n  }\n}(window));',
                    },
                    "metadata": {},
                    "output_type": "display_data",
                },
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "BokehUserWarning: ColumnDataSource's columns must be of the same length. Current lengths: ('robot_ids', 0), ('robot_ori_line_seg_xs', 1), ('robot_ori_line_seg_ys', 1), ('robot_xs', 0), ('robot_ys', 0)\n",
                        "BokehUserWarning: ColumnDataSource's columns must be of the same length. Current lengths: ('robot_ids', 0), ('robot_ori_line_seg_xs', 1), ('robot_ori_line_seg_ys', 1), ('robot_xs', 0), ('robot_ys', 0)\n",
                    ],
                },
                {
                    "data": {
                        "text/html": [
                            "\n",
                            "\n",
                            "\n",
                            "\n",
                            "\n",
                            "\n",
                            '  <div class="bk-root" id="31ab2831-5d94-4116-a289-ee126d9e51bd" data-root-id="15176"></div>\n',
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data",
                },
                {
                    "data": {
                        "application/javascript": [
                            "(function(root) {\n",
                            "  function embed_document(root) {\n",
                            "    \n",
                            '  var docs_json = {"b44a605b-97d2-4b8c-995a-c2e3ff079bf8":{"roots":{"references":[{"attributes":{"below":[{"id":"15185"}],"center":[{"id":"15188"},{"id":"15192"},{"id":"15222"},{"id":"15281"},{"id":"15326"}],"left":[{"id":"15189"}],"match_aspect":true,"plot_height":900,"plot_width":900,"renderers":[{"id":"15211"},{"id":"15228"},{"id":"15246"},{"id":"15265"},{"id":"15287"},{"id":"15308"}],"title":{"id":"15213"},"toolbar":{"id":"15200"},"x_range":{"id":"15177"},"x_scale":{"id":"15181"},"y_range":{"id":"15179"},"y_scale":{"id":"15183"}},"id":"15176","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"15190","type":"BasicTicker"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"orange"},"line_alpha":{"value":0.1},"radius":{"units":"data","value":0.02},"x":{"field":"ball_xs"},"y":{"field":"ball_ys"}},"id":"15227","type":"Circle"},{"attributes":{},"id":"15215","type":"BasicTickFormatter"},{"attributes":{"data":{"robot_ids":[],"robot_ori_line_seg_xs":[[]],"robot_ori_line_seg_ys":[[]],"robot_xs":[],"robot_ys":[]},"selected":{"id":"15301"},"selection_policy":{"id":"15302"}},"id":"15283","type":"ColumnDataSource"},{"attributes":{"data_source":{"id":"15224"},"glyph":{"id":"15226"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15227"},"selection_glyph":null,"view":{"id":"15229"}},"id":"15228","type":"GlyphRenderer"},{"attributes":{},"id":"15179","type":"DataRange1d"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_multi":null,"active_scroll":"auto","active_tap":"auto","tools":[{"id":"15193"},{"id":"15194"},{"id":"15195"},{"id":"15196"},{"id":"15197"},{"id":"15198"}]},"id":"15200","type":"Toolbar"},{"attributes":{"source":{"id":"15224"}},"id":"15229","type":"CDSView"},{"attributes":{},"id":"15196","type":"SaveTool"},{"attributes":{"overlay":{"id":"15199"}},"id":"15195","type":"BoxZoomTool"},{"attributes":{},"id":"15217","type":"BasicTickFormatter"},{"attributes":{},"id":"15238","type":"Selection"},{"attributes":{"source":{"id":"15242"}},"id":"15247","type":"CDSView"},{"attributes":{"source":{"id":"15283"}},"id":"15288","type":"CDSView"},{"attributes":{"label":{"value":"blue robots"},"renderers":[{"id":"15246"}]},"id":"15261","type":"LegendItem"},{"attributes":{},"id":"15177","type":"DataRange1d"},{"attributes":{"label":{"value":"yellow robots"},"renderers":[{"id":"15287"}]},"id":"15304","type":"LegendItem"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"yellow"},"line_alpha":{"value":0.1},"radius":{"units":"data","value":0.09},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15286","type":"Circle"},{"attributes":{"label":{"value":"Balls"},"renderers":[{"id":"15228"}]},"id":"15241","type":"LegendItem"},{"attributes":{"bottom_units":"screen","fill_alpha":0.5,"fill_color":"lightgrey","left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","top_units":"screen"},"id":"15199","type":"BoxAnnotation"},{"attributes":{},"id":"15181","type":"LinearScale"},{"attributes":{"data":{"field_line_xs":[[]],"field_line_ys":[[]]},"selected":{"id":"15219"},"selection_policy":{"id":"15220"}},"id":"15207","type":"ColumnDataSource"},{"attributes":{},"id":"15198","type":"HelpTool"},{"attributes":{},"id":"15239","type":"UnionRenderers"},{"attributes":{"data_source":{"id":"15207"},"glyph":{"id":"15209"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15210"},"selection_glyph":null,"view":{"id":"15212"}},"id":"15211","type":"GlyphRenderer"},{"attributes":{},"id":"15193","type":"PanTool"},{"attributes":{},"id":"15220","type":"UnionRenderers"},{"attributes":{},"id":"15302","type":"UnionRenderers"},{"attributes":{},"id":"15183","type":"LinearScale"},{"attributes":{"fill_color":{"value":"orange"},"radius":{"units":"data","value":0.02},"x":{"field":"ball_xs"},"y":{"field":"ball_ys"}},"id":"15226","type":"Circle"},{"attributes":{"formatter":{"id":"15215"},"ticker":{"id":"15190"}},"id":"15189","type":"LinearAxis"},{"attributes":{"source":{"id":"15207"}},"id":"15212","type":"CDSView"},{"attributes":{},"id":"15219","type":"Selection"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"cyan"},"line_alpha":{"value":0.1},"radius":{"units":"data","value":0.09},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15245","type":"Circle"},{"attributes":{"data":{"robot_ids":[],"robot_ori_line_seg_xs":[[]],"robot_ori_line_seg_ys":[[]],"robot_xs":[],"robot_ys":[]},"selected":{"id":"15258"},"selection_policy":{"id":"15259"}},"id":"15242","type":"ColumnDataSource"},{"attributes":{},"id":"15301","type":"Selection"},{"attributes":{"data_source":{"id":"15242"},"glyph":{"id":"15244"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15245"},"selection_glyph":null,"view":{"id":"15247"}},"id":"15246","type":"GlyphRenderer"},{"attributes":{},"id":"15194","type":"WheelZoomTool"},{"attributes":{"label":{"value":"Field lines"},"renderers":[{"id":"15211"}]},"id":"15223","type":"LegendItem"},{"attributes":{"text":""},"id":"15213","type":"Title"},{"attributes":{"items":[{"id":"15223"},{"id":"15241"},{"id":"15261"},{"id":"15280"},{"id":"15304"},{"id":"15325"}]},"id":"15222","type":"Legend"},{"attributes":{"source":{"id":"15242"}},"id":"15266","type":"CDSView"},{"attributes":{"data_source":{"id":"15242"},"glyph":{"id":"15263"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15264"},"selection_glyph":null,"view":{"id":"15266"}},"id":"15265","type":"GlyphRenderer"},{"attributes":{"line_alpha":{"value":0.1},"xs":{"field":"robot_ori_line_seg_xs"},"ys":{"field":"robot_ori_line_seg_ys"}},"id":"15307","type":"MultiLine"},{"attributes":{"data":{"ball_xs":[],"ball_ys":[]},"selected":{"id":"15238"},"selection_policy":{"id":"15239"}},"id":"15224","type":"ColumnDataSource"},{"attributes":{"line_alpha":{"value":0.1},"xs":{"field":"field_line_xs"},"ys":{"field":"field_line_ys"}},"id":"15210","type":"MultiLine"},{"attributes":{},"id":"15259","type":"UnionRenderers"},{"attributes":{"line_alpha":{"value":0.1},"xs":{"field":"robot_ori_line_seg_xs"},"ys":{"field":"robot_ori_line_seg_ys"}},"id":"15264","type":"MultiLine"},{"attributes":{"axis":{"id":"15185"},"ticker":null},"id":"15188","type":"Grid"},{"attributes":{"source":{"id":"15283"}},"id":"15309","type":"CDSView"},{"attributes":{},"id":"15258","type":"Selection"},{"attributes":{"fill_color":{"value":"cyan"},"radius":{"units":"data","value":0.09},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15244","type":"Circle"},{"attributes":{"xs":{"field":"robot_ori_line_seg_xs"},"ys":{"field":"robot_ori_line_seg_ys"}},"id":"15306","type":"MultiLine"},{"attributes":{},"id":"15186","type":"BasicTicker"},{"attributes":{"label":{"value":"blue robot orientations"},"renderers":[{"id":"15265"}]},"id":"15280","type":"LegendItem"},{"attributes":{"label":{"value":"yellow robot orientations"},"renderers":[{"id":"15308"}]},"id":"15325","type":"LegendItem"},{"attributes":{"data_source":{"id":"15283"},"glyph":{"id":"15306"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15307"},"selection_glyph":null,"view":{"id":"15309"}},"id":"15308","type":"GlyphRenderer"},{"attributes":{"source":{"id":"15242"},"text":{"field":"robot_ids"},"text_font_size":{"value":"12pt"},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15281","type":"LabelSet"},{"attributes":{"xs":{"field":"field_line_xs"},"ys":{"field":"field_line_ys"}},"id":"15209","type":"MultiLine"},{"attributes":{"xs":{"field":"robot_ori_line_seg_xs"},"ys":{"field":"robot_ori_line_seg_ys"}},"id":"15263","type":"MultiLine"},{"attributes":{"formatter":{"id":"15217"},"ticker":{"id":"15186"}},"id":"15185","type":"LinearAxis"},{"attributes":{"source":{"id":"15283"},"text":{"field":"robot_ids"},"text_font_size":{"value":"12pt"},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15326","type":"LabelSet"},{"attributes":{},"id":"15197","type":"ResetTool"},{"attributes":{"fill_color":{"value":"yellow"},"radius":{"units":"data","value":0.09},"x":{"field":"robot_xs"},"y":{"field":"robot_ys"}},"id":"15285","type":"Circle"},{"attributes":{"axis":{"id":"15189"},"dimension":1,"ticker":null},"id":"15192","type":"Grid"},{"attributes":{"data_source":{"id":"15283"},"glyph":{"id":"15285"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"15286"},"selection_glyph":null,"view":{"id":"15288"}},"id":"15287","type":"GlyphRenderer"}],"root_ids":["15176"]},"title":"Bokeh Application","version":"2.2.3"}};\n',
                            '  var render_items = [{"docid":"b44a605b-97d2-4b8c-995a-c2e3ff079bf8","notebook_comms_target":"15617","root_ids":["15176"],"roots":{"15176":"31ab2831-5d94-4116-a289-ee126d9e51bd"}}];\n',
                            "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
                            "\n",
                            "  }\n",
                            "  if (root.Bokeh !== undefined) {\n",
                            "    embed_document(root);\n",
                            "  } else {\n",
                            "    var attempts = 0;\n",
                            "    var timer = setInterval(function(root) {\n",
                            "      if (root.Bokeh !== undefined) {\n",
                            "        clearInterval(timer);\n",
                            "        embed_document(root);\n",
                            "      } else {\n",
                            "        attempts++;\n",
                            "        if (attempts > 100) {\n",
                            "          clearInterval(timer);\n",
                            '          console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");\n',
                            "        }\n",
                            "      }\n",
                            "    }, 10, root)\n",
                            "  }\n",
                            "})(window);",
                        ],
                        "application/vnd.bokehjs_exec.v0+json": "",
                    },
                    "metadata": {
                        "application/vnd.bokehjs_exec.v0+json": {"id": "15176"}
                    },
                    "output_type": "display_data",
                },
                {
                    "data": {
                        "application/vnd.jupyter.widget-view+json": {
                            "model_id": "c8854cf3b4964bb09111bb301d5652e9",
                            "version_major": 2,
                            "version_minor": 0,
                        },
                        "text/plain": [
                            "interactive(children=(IntSlider(value=0, description='idx', max=7999), Output()), _dom_classes=('widget-intera…"
                        ],
                    },
                    "metadata": {},
                    "output_type": "display_data",
                },
                {
                    "data": {
                        "text/plain": [
                            "<function __main__.plot_ssl_wrapper_at_idx(idx)>"
                        ]
                    },
                    "execution_count": 16,
                    "metadata": {},
                    "output_type": "execute_result",
                },
            ],
            "source": [
                "from bokeh.plotting import figure\n",
                "from bokeh.io import output_notebook, show, push_notebook\n",
                "from python_tools.plotting.plot_ssl_wrapper import SSLWrapperPlotter\n",
                "\n",
                "output_notebook()\n",
                "\n",
                "fig = figure(plot_width=900, plot_height=900, match_aspect=True)\n",
                "\n",
                "ssl_wrapper_plotter = SSLWrapperPlotter(fig)\n",
                "\n",
                "\n",
                "def get_ratepass_grid(ssl_wrapper):\n",
                "    the_world = world.World(ssl_wrapper.SerializeToString(), dict())\n",
                "\n",
                "    field_length = ssl_wrapper.geometry.field.field_length / 1000\n",
                "    field_width = ssl_wrapper.geometry.field.field_width / 1000\n",
                "\n",
                "    grid_size = 0.05\n",
                "    grid_dims = (int(field_length // grid_size), int(field_width // grid_size))\n",
                "    ratepass_grid = np.ndarray(grid_dims)\n",
                "\n",
                "    xcoords = np.arange(-field_length / 2, field_length / 2, grid_size)\n",
                "    ycoords = np.arange(-field_width / 2, field_width / 2, grid_size)\n",
                "\n",
                "    for x_idx, x in enumerate(xcoords):\n",
                "        for y_idx, y in enumerate(ycoords):\n",
                "            pass_dict = {\n",
                '                "passer_point": world.Point(4, 2),\n',
                '                "receiver_point": world.Point(x, y),\n',
                '                "pass_speed": 5.0,\n',
                '                "receive_and_dribble": False,\n',
                "            }\n",
                "            if x_idx < grid_dims[0] and y_idx < grid_dims[1]:\n",
                "                ratepass_grid[x_idx, y_idx] = passing.ratePass(the_world, pass_dict)\n",
                "    return np.flip(np.rot90(ratepass_grid), axis=0)\n",
                "\n",
                "\n",
                "def plot_ssl_wrapper_at_idx(idx):\n",
                "    ssl_wrapper_plotter.plot_ssl_wrapper(wrapper_proto_log[idx])\n",
                "\n",
                "    field_length = wrapper_proto_log[idx].geometry.field.field_length / 1000\n",
                "    field_width = wrapper_proto_log[idx].geometry.field.field_width / 1000\n",
                "\n",
                "    ratepass_grid = get_ratepass_grid(wrapper_proto_log[idx])\n",
                "    image = fig.image(\n",
                "        image=[ratepass_grid],\n",
                "        x=-field_length / 2,\n",
                "        y=-field_width / 2,\n",
                "        dh=field_width,\n",
                "        dw=field_length,\n",
                "        palette=palettes.viridis(100),\n",
                '        level="image",\n',
                '        legend_label = "ratePass function cost"\n',
                "    )\n",
                "    fig.legend.click_policy = 'hide'\n",
                "    push_notebook()\n",
                "\n",
                "\n",
                "show(fig, notebook_handle=True)\n",
                "\n",
                "slider = ipywidgets.IntSlider(min=0, max=len(wrapper_proto_log) - 1)\n",
                "ipywidgets.interact(plot_ssl_wrapper_at_idx, idx=slider)",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "genuine-coordinator",
            "metadata": {"lines_to_next_cell": 2},
            "outputs": [],
            "source": [],
        },
    ],
    "metadata": {
        "jupytext": {"formats": "ipynb,py:light"},
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3",
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 3},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.7.9",
        },
    },
    "nbformat": 4,
    "nbformat_minor": 5,
}
