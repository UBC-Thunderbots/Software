/*
 * DO NOT EDIT THIS FILE. Generated by checkmk.
 * Edit the original source file "in" instead.
 */

#include <check.h>

#line 1 "in"
START_TEST(test1)
{
#line 2
	ck_assert(0 == 0);
}
END_TEST

START_TEST(test2)
{
#line 4
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test3)
{
#line 6
	ck_assert(1 == 0);
}
END_TEST

START_TEST(test4)
{
#line 8
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test5)
{
#line 10
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test6)
{
#line 12
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test7)
{
#line 14
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test8)
{
#line 16
  	ck_assert(1 == 0);

}
END_TEST

START_TEST(test9)
{
#line 19
	ck_assert(0 == 0);
}
END_TEST

START_TEST(test10)
{
#line 21
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test11)
{
#line 23
	ck_assert(1 == 0);
}
END_TEST

START_TEST(test12)
{
#line 25
  	ck_assert(1 == 2);
}
END_TEST

START_TEST(test13)
{
#line 27
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test14)
{
#line 29
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test15)
{
#line 31
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test16)
{
#line 33
  	ck_assert(1 == 0);

}
END_TEST

START_TEST(test17)
{
#line 36
	ck_assert(0 == 0);
}
END_TEST

START_TEST(test18)
{
#line 38
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test19)
{
#line 40
	ck_assert(1 == 1);
}
END_TEST

START_TEST(test20)
{
#line 42
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test21)
{
#line 44
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test22)
{
#line 46
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test23)
{
#line 48
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test24)
{
#line 50
  	ck_assert(1 == 1);

}
END_TEST

START_TEST(test25)
{
#line 53
	ck_assert(0 == 1);
}
END_TEST

START_TEST(test26)
{
#line 55
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test27)
{
#line 57
	ck_assert(1 == 0);
}
END_TEST

START_TEST(test28)
{
#line 59
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test29)
{
#line 61
  	ck_assert(1 == 1);
}
END_TEST

START_TEST(test30)
{
#line 63
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test31)
{
#line 65
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test32)
{
#line 67
  	ck_assert(1 == 0);

}
END_TEST

START_TEST(test33)
{
#line 70
	ck_assert(0 == 0);
}
END_TEST

START_TEST(test34)
{
#line 72
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test35)
{
#line 74
	ck_assert(1 == 1);
}
END_TEST

START_TEST(test36)
{
#line 76
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test37)
{
#line 78
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test38)
{
#line 80
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test39)
{
#line 82
  	ck_assert(1 == 0);
}
END_TEST

START_TEST(test40)
{
#line 84
  	ck_assert(1 == 1);
}
END_TEST

int main(void)
{
    Suite *s1 = suite_create("Core");
    TCase *tc1_1 = tcase_create("Core");
    SRunner *sr = srunner_create(s1);
    int nf;

    suite_add_tcase(s1, tc1_1);
    tcase_add_exit_test(tc1_1, test1, 0);
    tcase_add_exit_test(tc1_1, test2, 1);
    tcase_add_exit_test(tc1_1, test3, 0);
    tcase_add_exit_test(tc1_1, test4, +0);
    tcase_add_exit_test(tc1_1, test5, -1);
    tcase_add_exit_test(tc1_1, test6, -1);
    tcase_add_exit_test(tc1_1, test7, -0);
    tcase_add_exit_test(tc1_1, test8, +1);
    tcase_add_test_raise_signal(tc1_1, test9, 0);
    tcase_add_test_raise_signal(tc1_1, test10, 1);
    tcase_add_test_raise_signal(tc1_1, test11, 0);
    tcase_add_test_raise_signal(tc1_1, test12, +0);
    tcase_add_test_raise_signal(tc1_1, test13, -1);
    tcase_add_test_raise_signal(tc1_1, test14, -1);
    tcase_add_test_raise_signal(tc1_1, test15, -0);
    tcase_add_test_raise_signal(tc1_1, test16, +1);
    tcase_add_loop_test(tc1_1, test17, 0, 2);
    tcase_add_loop_test(tc1_1, test18, 1, 0);
    tcase_add_loop_test(tc1_1, test19, 0, 1);
    tcase_add_loop_test(tc1_1, test20, +0, -2);
    tcase_add_loop_test(tc1_1, test21, -1, +3);
    tcase_add_loop_test(tc1_1, test22, -1, +2);
    tcase_add_loop_test(tc1_1, test23, -0, -2);
    tcase_add_loop_test(tc1_1, test24, +1, -3);
    tcase_add_loop_exit_test(tc1_1, test25, 1, 0, 2);
    tcase_add_loop_exit_test(tc1_1, test26, 2, 1, 0);
    tcase_add_loop_exit_test(tc1_1, test27, 2, 0, 1);
    tcase_add_loop_exit_test(tc1_1, test28, -1, +0, -2);
    tcase_add_loop_exit_test(tc1_1, test29, -3, -1, +3);
    tcase_add_loop_exit_test(tc1_1, test30, +0, -1, +2);
    tcase_add_loop_exit_test(tc1_1, test31, -4, -0, -2);
    tcase_add_loop_exit_test(tc1_1, test32, +2, +1, -3);
    tcase_add_loop_test_raise_signal(tc1_1, test33, 1, 0, 2);
    tcase_add_loop_test_raise_signal(tc1_1, test34, 2, 1, 0);
    tcase_add_loop_test_raise_signal(tc1_1, test35, 2, 0, 1);
    tcase_add_loop_test_raise_signal(tc1_1, test36, -1, +0, -2);
    tcase_add_loop_test_raise_signal(tc1_1, test37, -3, -1, +3);
    tcase_add_loop_test_raise_signal(tc1_1, test38, +0, -1, +2);
    tcase_add_loop_test_raise_signal(tc1_1, test39, -4, -0, -2);
    tcase_add_loop_test_raise_signal(tc1_1, test40, +2, +1, -3);

    srunner_run_all(sr, CK_ENV);
    nf = srunner_ntests_failed(sr);
    srunner_free(sr);

    return nf == 0 ? 0 : 1;
}
