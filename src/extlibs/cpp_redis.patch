diff --git a/includes/cpp_redis/core/client.hpp b/includes/cpp_redis/core/client.hpp
index e3ac14e..a97ba91 100644
--- a/includes/cpp_redis/core/client.hpp
+++ b/includes/cpp_redis/core/client.hpp
@@ -236,7 +236,7 @@ namespace cpp_redis {
 				std::unique_lock<std::mutex> lock_callback(m_callbacks_mutex);
 				__CPP_REDIS_LOG(debug, "cpp_redis::client waiting for callbacks to complete");
 				if (!m_sync_condvar.wait_for(lock_callback, timeout,
-				                             [=] { return m_callbacks_running == 0 && m_commands.empty(); })) {
+				                             [=, this] { return m_callbacks_running == 0 && m_commands.empty(); })) {
 					__CPP_REDIS_LOG(debug, "cpp_redis::client finished waiting for callback");
 				} else {
 					__CPP_REDIS_LOG(debug, "cpp_redis::client timed out waiting for callback");
diff --git a/includes/cpp_redis/core/sentinel.hpp b/includes/cpp_redis/core/sentinel.hpp
index 21d9190..82e190d 100644
--- a/includes/cpp_redis/core/sentinel.hpp
+++ b/includes/cpp_redis/core/sentinel.hpp
@@ -132,7 +132,7 @@ namespace cpp_redis {
 
 				std::unique_lock<std::mutex> lock_callback(m_callbacks_mutex);
 				__CPP_REDIS_LOG(debug, "cpp_redis::sentinel waiting for callbacks to complete");
-				if (!m_sync_condvar.wait_for(lock_callback, timeout, [=] {
+				if (!m_sync_condvar.wait_for(lock_callback, timeout, [=, this] {
 						return m_callbacks_running == 0 && m_callbacks.empty();
 				})) {
 					__CPP_REDIS_LOG(debug, "cpp_redis::sentinel finished waiting for callback");
-- 
