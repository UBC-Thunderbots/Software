syntax                  = "proto2";
option cc_enable_arenas = true;

import "extlibs/er_force_sim/src/protobuf/ssl_referee.proto";
import "extlibs/er_force_sim/src/protobuf/ssl_referee_game_event.proto";
import "extlibs/er_force_sim/src/protobuf/ssl_game_event_2019.proto";
package amun;

message GameState
{
    enum State
    {
        Halt      = 1;
        Stop      = 2;
        Game      = 3;
        GameForce = 4;

        KickoffYellowPrepare = 5;
        KickoffYellow        = 6;
        PenaltyYellowPrepare = 7;
        PenaltyYellow        = 8;
        PenaltyYellowRunning = 21;
        DirectYellow         = 9;
        IndirectYellow       = 10;
        BallPlacementYellow  = 19;

        KickoffBluePrepare = 11;
        KickoffBlue        = 12;
        PenaltyBluePrepare = 13;
        PenaltyBlue        = 14;
        PenaltyBlueRunning = 22;
        DirectBlue         = 15;
        IndirectBlue       = 16;
        BallPlacementBlue  = 20;

        TimeoutYellow = 17;
        TimeoutBlue   = 18;
    }

    required .SSL_Referee.Stage stage = 1;
    optional sint32 stage_time_left   = 2;

    // Current state on the field
    // Required as the refbox command doesn't tell whether we or
    // the opponents have taken a free kick / kickoff / penalty yet
    required State state = 3;

    required .SSL_Referee.TeamInfo yellow = 4;
    required .SSL_Referee.TeamInfo blue   = 5;

    optional .SSL_Referee.Point designated_position = 6;
    optional SSL_Referee_Game_Event game_event      = 7 [deprecated = true];

    optional bool goals_flipped = 8;

    // even when the internal referee is enabled,
    // this value will be true when a real game is running (i.e. not in halt,
    // timeout)
    optional bool is_real_game_running = 9;

    // The time in microseconds that is remaining until the current action times
    // out The time will not be reset. It can get negative. An autoRef would raise
    // an appropriate event, if the time gets negative. Possible actions where
    // this time is relevant:
    //  * free kicks
    //  * kickoff, penalty kick, force start
    //  * ball placement
    optional int32 current_action_time_remaining = 10;

    // the state that is supposed to come after the current state
    // this is important for ball placement for which it is necessary to
    // know the state that would follow the ball placement if successfull.
    // Note that it is not guaranteed to be the next state, since ball placement
    // might fail or fouls might be commited
    optional State next_state = 11;

    // the last game event that was sent by the game controller
    // it replaces the field game_event
    optional gameController.GameEvent game_event_2019 = 12;
}
