load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

http_archive(
    name = "rules_foreign_cc",
    sha256 = "33a5690733c5cc2ede39cb62ebf89e751f2448e27f20c8b2fbbc7d136b166804",
    strip_prefix = "rules_foreign_cc-0.5.1",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.5.1.tar.gz",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

# This sets up some common toolchains for building targets. For more details, please see
# https://bazelbuild.github.io/rules_foreign_cc/0.5.1/flatten.html#rules_foreign_cc_dependencies
rules_foreign_cc_dependencies()

http_archive(
    name = "rules_python",
    sha256 = "a30abdfc7126d497a7698c29c46ea9901c6392d6ed315171a6df5ce433aa4502",
    strip_prefix = "rules_python-0.6.0",
    url = "https://github.com/bazelbuild/rules_python/archive/0.6.0.tar.gz",
)

load("@rules_python//python:pip.bzl", "pip_install")

all_contents = """filegroup(name = "all", srcs = glob(["**/**"]), visibility = ["//visibility:public"])"""

http_archive(
    name = "rapidcheck",
    build_file_content = all_contents,
    sha256 = "93f73c2c39ff91fd3a265b87b429ed266631c2425d9287d4548b149b99168736",
    strip_prefix = "rapidcheck-7acca63b8e834a74fd47fe8fbf17668d22cc6331",
    urls = ["https://github.com/emil-e/rapidcheck/archive/7acca63b8e834a74fd47fe8fbf17668d22cc6331.zip"],
)

http_archive(
    name = "cpp_redis",
    sha256 = "12a6fc86ba4ca3d4537a3eee82c094f385b8e03e283c664c976f16d421f17f7d",
    strip_prefix = "cpp_redis-fc2c43fa07e45e1ef0f77cbda6a240e7890ae5aa",
    urls = [
        "https://github.com/cpp-redis/cpp_redis/archive/fc2c43fa07e45e1ef0f77cbda6a240e7890ae5aa.zip",
    ],
)

http_archive(
    name = "tacopie",
    sha256 = "bbdebecdb68d5f9eb64170217000daf844e0aee18b8c4d3dd373d07efd9f7316",
    strip_prefix = "tacopie-master",
    url = "https://github.com/cylix/tacopie/archive/master.zip",
)

http_archive(
    name = "gtest",
    sha256 = "927827c183d01734cc5cfef85e0ff3f5a92ffe6188e0d18e909c5efebf28a0c7",
    strip_prefix = "googletest-release-1.8.1",
    url = "https://github.com/google/googletest/archive/release-1.8.1.zip",
)

http_archive(
    name = "g3log",
    build_file = "@//extlibs:g3log.BUILD",
    sha256 = "176fcf4e1634aba425549c32f76426d7976ab6973370785fd6b76986e9f7b20e",
    strip_prefix = "g3log-1.3.3",
    url = "https://github.com/KjellKod/g3log/archive/1.3.3.zip",
)

http_archive(
    name = "g3sinks",
    build_file = "@//extlibs:g3sinks.BUILD",
    sha256 = "77632432de1ec456987c7d83c6eb163bb42f0eb9df6e0bdf63bcf7961c1f6c70",
    strip_prefix = "g3sinks-1.1.3",
    url = "https://github.com/KjellKod/g3sinks/archive/1.1.3.zip",
)

http_archive(
    name = "base64",
    build_file = "@//extlibs:base64.BUILD",
    sha256 = "5e5366919938b834ca95fec4c2a80ad0c002872175d43226c933d25e40572883",
    strip_prefix = "cpp-base64-2.rc.08",
    url = "https://github.com/ReneNyffenegger/cpp-base64/archive/refs/tags/V2.rc.08.zip",
)

http_archive(
    name = "rules_proto",
    strip_prefix = "rules_proto-e507ccded37c389186afaeb2b836ec576dc875dc",
    urls = [
        "https://github.com/bazelbuild/rules_proto/archive/e507ccded37c389186afaeb2b836ec576dc875dc.zip",
    ],
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

git_repository(
    name = "com_github_nelhage_rules_boost",
    commit = "9f9fb8b2f0213989247c9d5c0e814a8451d18d7f",
    remote = "https://github.com/nelhage/rules_boost",
    shallow_since = "1570056263 -0700",
)

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")

boost_deps()

new_git_repository(
    name = "eigen",
    build_file = "@//extlibs:eigen.BUILD",
    commit = "21ae2afd4edaa1b69782c67a54182d34efe43f9c",
    remote = "https://chromium.googlesource.com/external/gitlab.com/libeigen/eigen.git",
    shallow_since = "1544551075 +0100",
)

# nanopb: lightweight protobuf library used on the STM32. The build file in the
# repo does not build the proto compiler (protoc) as a target, and is really complicated
# to set it up as a protobuf plugin due to lack of bazel support. So we use the archive
# which has both the headers and compiled protoc w/ the c support baked in.

http_archive(
    name = "nanopb",
    build_file = "@//extlibs:nanopb.BUILD",
    sha256 = "e98dd6403ab8c5b271d32a6bc025e7e596bb181c7bc7e0492c5daa21fc44c940",
    strip_prefix = "nanopb-0.3.9.4-linux-x86",
    urls = [
        "https://jpa.kapsi.fi/nanopb/download/nanopb-0.3.9.4-linux-x86.tar.gz",
    ],
)

new_local_repository(
    name = "libusb",
    build_file = "@//extlibs:libusb.BUILD",
    path = "/",
)

new_git_repository(
    name = "munkres_cpp",
    build_file = "@//extlibs:munkres_cpp.BUILD",
    commit = "61086fcf5b3a8ad4bda578cdc2d1dca57b548786",
    remote = "https://github.com/saebyn/munkres-cpp.git",
    shallow_since = "1479502661 -0800",
)

# yaml cpp parser for dynamic parameters test
git_repository(
    name = "yaml-cpp",
    commit = "f531f8a8c3f8ca0923f9219c72fcca511555f824",
    remote = "https://github.com/jbeder/yaml-cpp.git",
    shallow_since = "1571237073 -0500",
)

# Qt bazel rules from https://github.com/justbuchanan/bazel_rules_qt
git_repository(
    name = "bazel_rules_qt",
    commit = "7665177f47bf514176d5f8575a7334f030203e3d",
    remote = "https://github.com/justbuchanan/bazel_rules_qt.git",
    shallow_since = "1614109311 -0800",
)

# Fake Function Framework
new_git_repository(
    name = "fff",
    build_file = "@//extlibs:fff.BUILD",
    commit = "7e09f07e5b262b1cc826189dc5057379e40ce886",
    remote = "https://github.com/meekrosoft/fff.git",
    shallow_since = "1566392271 +0200",
)

# Right now qt5 is installed on the system using the setup_software.sh script
# We assume we can find the headers in the "standard" path used in this rule
new_local_repository(
    name = "qt",
    build_file = "@bazel_rules_qt//:qt.BUILD",
    path = "/usr/include/x86_64-linux-gnu/qt5/",
)

new_local_repository(
    name = "linux_gcc",
    build_file = "@//extlibs:linux_gcc.BUILD",
    path = "/",
)

# libclang-dev is installed into the system through setup_software.sh
new_local_repository(
    name = "libclang",
    build_file = "@//extlibs:libclang.BUILD",
    path = "/usr/lib/llvm-6.0/",
)

http_archive(
    name = "arm_developer_gcc",
    build_file = "@//extlibs:arm_gcc.BUILD",
    sha256 = "b50b02b0a16e5aad8620e9d7c31110ef285c1dde28980b1a9448b764d77d8f92",
    strip_prefix = "gcc-arm-none-eabi-8-2019-q3-update",
    urls = [
        "https://developer.arm.com/-/media/Files/downloads/gnu-rm/8-2019q3/RC1.1/gcc-arm-none-eabi-8-2019-q3-update-linux.tar.bz2",
    ],
)

http_archive(
    name = "jetson_nano_gcc",
    build_file = "@//extlibs:jetson_nano_gcc.BUILD",
    sha256 = "73eed74e593e2267504efbcf3678918bb22409ab7afa3dc7c135d2c6790c2345",
    strip_prefix = "gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu",
    urls = [
        "http://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz",
    ],
)

# We use our own fork of Box2D as we have made a few small modifications
# See the repository readme for details
new_git_repository(
    name = "box2d",
    build_file = "@//extlibs:box2d.BUILD",
    commit = "bddb4ec7efc8a6630fcbe7ef913017d88fb9b4b1",
    remote = "https://github.com/UBC-Thunderbots/Box2D",
    shallow_since = "1571445859 -0700",
)

# tool used to flash firmware with bazel
git_repository(
    name = "platformio_rules",
    commit = "882a88e4be94a3b0aadf8d694c012ffeec5eb32a",
    remote = "http://github.com/mum4k/platformio_rules.git",
    shallow_since = "1584297373 -0400",
)

# Developer tools for working with bazel
git_repository(
    name = "bazel_buildtools",
    commit = "41a45edb9184de83dd29e2791bd995fbb73ea141",
    remote = "git@github.com:bazelbuild/buildtools.git",
)

# Needed for bazel buildifier: it is written in Go and hence needs rules_go to
# be built.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "b27e55d2dcc9e6020e17614ae6e0374818a3e3ce6f2024036e688ada24110444",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/rules_go/releases/download/v0.21.0/rules_go-v0.21.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.21.0/rules_go-v0.21.0.tar.gz",
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains()

# Needed for bazel buildifier
http_archive(
    name = "bazel_gazelle",
    sha256 = "be9296bfd64882e3c08e3283c58fcb461fa6dd3c171764fcc4cf322f60615a9b",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

gazelle_dependencies()

# Bazel buildtools, provide us with the bazel formatter ("buildifier")
http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = "46ead728d66d48969f8ae3b88f2fd10fddfc80dd7903fb8b5bff9c568f0ebf25",
    strip_prefix = "buildtools-9e63c6f02e63adaab63e21a3a8feb75f4f7503cb",
    url = "https://github.com/bazelbuild/buildtools/archive/9e63c6f02e63adaab63e21a3a8feb75f4f7503cb.zip",
)

# State Machine Library
new_git_repository(
    name = "sml",
    build_file = "@//extlibs:sml.BUILD",
    commit = "07a503cc3f18de2b861ea15d8357d3b3c0c978d6",  # Version `1.1.3`
    remote = "https://github.com/boost-ext/sml.git",
    shallow_since = "1596403987 -0600",
)

new_git_repository(
    name = "trinamic",
    build_file = "@//extlibs:trinamic.BUILD",
    commit = "0cd695fab6d43ceb121af4b8608e5d92b14e1ce9",
    remote = "https://github.com/trinamic/TMC-API.git",
    shallow_since = "1631132123 +0200",
)

register_toolchains("//:py_toolchain")

pip_install(
    name = "python_control_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//firmware/app/control/python_controller:requirements.txt",
)

pip_install(
    name = "dynamic_parameter_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//shared/parameter/generation_scripts:requirements.txt",
)

pip_install(
    name = "nanopb_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//extlibs:nanopb_requirements.txt",
)

pip_install(
    name = "python_tools_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//python_tools:requirements.txt",
)

pip_install(
    name = "display_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//software/jetson_nano/display:requirements.txt",
)

pip_install(
    name = "jetson_nano_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//software/jetson_nano:requirements.txt",
)

pip_install(
    name = "thunderscope_deps",
    python_interpreter = "/opt/tbotspython/bin/python",
    requirements = "//software/thunderscope:requirements.txt",
)

# required to use `py_proto_library` from protobuf
http_archive(
    name = "six_archive",
    build_file = "//extlibs:six.BUILD",
    sha256 = "105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a",
    url = "https://pypi.python.org/packages/source/s/six/six-1.10.0.tar.gz#md5=34eed507548117b2ab523ab14b2f8b55",
)

bind(
    name = "six",
    actual = "@six_archive//:six",
)

http_archive(
    name = "pybind11_bazel",
    strip_prefix = "pybind11_bazel-72cbbf1fbc830e487e3012862b7b720001b70672",
    urls = ["https://github.com/pybind/pybind11_bazel/archive/72cbbf1fbc830e487e3012862b7b720001b70672.zip"],
)

# We still require the pybind library.
http_archive(
    name = "pybind11",
    build_file = "@pybind11_bazel//:pybind11.BUILD",
    strip_prefix = "pybind11-2.9.0",
    urls = ["https://github.com/pybind/pybind11/archive/refs/tags/v2.9.0.zip"],
)

load("@pybind11_bazel//:python_configure.bzl", "python_configure")

python_configure(name = "local_config_python")

maybe(
    git_repository,
    name = "rules_third_party",
    commit = "8d0ba00f9874588c1ea38d1be2859060ac8c8516",
    remote = "https://github.com/DraconicEnt/rules_third_party.git",
)

load("@rules_third_party//libraries:bullet.bzl", "bullet")

# Adds commit 272c7099d3ba8ac9e8c142e361e8d4cf5d91b8f2 of
# https://github.com/bulletphysics/bullet3 to the WORKSPACE
bullet()

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
git_repository(
    name = "hedron_compile_commands",
    commit = "084957eaa1bf6e2bd031f50b1f5d04c89273103a",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    shallow_since = "1640414663 -0800",
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()
