load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

http_archive(
    name = "gtest",
    sha256 = "927827c183d01734cc5cfef85e0ff3f5a92ffe6188e0d18e909c5efebf28a0c7",
    strip_prefix = "googletest-release-1.8.1",
    url = "https://github.com/google/googletest/archive/release-1.8.1.zip",
)

http_archive(
    name = "g3log",
    build_file = "@//external:g3log.BUILD",
    sha256 = "1c141aa62c30985e8fd8c56bddbf2e32f080bf839a48f53c9593ecdebfb8a175",
    strip_prefix = "g3log-1.3.2",
    url = "https://github.com/KjellKod/g3log/archive/1.3.2.zip",
)

http_archive(
    name = "rules_proto",
    sha256 = "602e7161d9195e50246177e7c55b2f39950a9cf7366f74ed5f22fd45750cd208",
    strip_prefix = "rules_proto-97d8af4dc474595af3900dd85cb3a29ad28cc313",
    url = "https://github.com/bazelbuild/rules_proto/archive/97d8af4dc474595af3900dd85cb3a29ad28cc313.tar.gz",
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

git_repository(
    name = "com_github_nelhage_rules_boost",
    commit = "9f9fb8b2f0213989247c9d5c0e814a8451d18d7f",
    remote = "https://github.com/nelhage/rules_boost",
)

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")

boost_deps()

http_archive(
    name = "eigen",
    build_file = "@//external:eigen.BUILD",
    sha256 = "3a66f9bfce85aff39bc255d5a341f87336ec6f5911e8d816dd4a3fdc500f8acf",
    strip_prefix = "eigen-eigen-c5e90d9e764e",
    url = "https://bitbucket.org/eigen/eigen/get/c5e90d9.tar.gz",
)

new_local_repository(
    name = "libusb",
    build_file = "@//external:libusb.BUILD",
    path = "/",
)

new_git_repository(
    name = "munkres_cpp",
    build_file = "@//external:munkres_cpp.BUILD",
    commit = "61086fcf5b3a8ad4bda578cdc2d1dca57b548786",
    remote = "https://github.com/saebyn/munkres-cpp.git",
)

# yaml cpp parser for dynamic parameters test
git_repository(
    name = "yaml-cpp",
    commit = "f531f8a8c3f8ca0923f9219c72fcca511555f824",
    remote = "https://github.com/jbeder/yaml-cpp.git",
    shallow_since = "1571237073 -0500",
)

# Qt bazel rules from https://github.com/justbuchanan/bazel_rules_qt
git_repository(
    name = "bazel_rules_qt",
    commit = "3f949bf4b5dcae2941ba3b71b3ddeb5d39637907",
    remote = "https://github.com/justbuchanan/bazel_rules_qt.git",
)

# nanopb: lightweight protobuf library used on the STM32. The build file in the
# repo does not build the proto compiler (protoc) as a target, and is really compilicated
# to set it up as a protobuf plugin due to lack of bazel support. So we use the archive
# which has both the headers and compiled protoc w/ the c support baked in.

http_archive(
    name = "nanopb",
    build_file = "@//external:nanopb.BUILD",
    sha256 = "e98dd6403ab8c5b271d32a6bc025e7e596bb181c7bc7e0492c5daa21fc44c940",
    strip_prefix = "nanopb-0.3.9.4-linux-x86",
    urls = [
        "https://jpa.kapsi.fi/nanopb/download/nanopb-0.3.9.4-linux-x86.tar.gz",
    ],
)

# Right now qt5 is installed on the system using the setup_software.sh script
# We assume we can find the headers in the "standard" path used in this rule
new_local_repository(
    name = "qt",
    build_file = "@bazel_rules_qt//:qt.BUILD",
    path = "external/qt",  # This directory is symlinked in the setup script
)

http_archive(
    name = "llvm_clang",
    build_file = "@//external:clang.BUILD",
    sha256 = "a23b082b30c128c9831dbdd96edad26b43f56624d0ad0ea9edec506f5385038d",
    strip_prefix = "clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04",
    urls = [
        "http://releases.llvm.org/9.0.0/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz",
    ],
)

http_archive(
    name = "arm_developer_gcc",
    build_file = "@//external:arm_gcc.BUILD",
    sha256 = "b50b02b0a16e5aad8620e9d7c31110ef285c1dde28980b1a9448b764d77d8f92",
    strip_prefix = "gcc-arm-none-eabi-8-2019-q3-update",
    urls = [
        "https://developer.arm.com/-/media/Files/downloads/gnu-rm/8-2019q3/RC1.1/gcc-arm-none-eabi-8-2019-q3-update-linux.tar.bz2",
    ],
)

# We use our own fork of Box2D as we have made a few small modifications
# See the repository readme for details
new_git_repository(
    name = "box2d",
    build_file = "@//external:box2d.BUILD",
    commit = "bddb4ec7efc8a6630fcbe7ef913017d88fb9b4b1",
    remote = "https://github.com/UBC-Thunderbots/Box2D",
    shallow_since = "1571445859 -0700",
)

# Magic enum library from https://github.com/Neargye/magic_enum
new_git_repository(
    name = "magic_enum",
    build_file = "@//external:magic_enum.BUILD",
    commit = "49d2429cf110f804048bc459b1d2c126d43b0a9a",
    remote = "https://github.com/Neargye/magic_enum.git",
)
