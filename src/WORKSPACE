load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

http_archive(
    name = "rules_foreign_cc",
    sha256 = "c2cdcf55ffaf49366725639e45dedd449b8c3fe22b54e31625eb80ce3a240f1e",
    strip_prefix = "rules_foreign_cc-0.1.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.1.0.zip",
)

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

all_contents = """filegroup(name = "all", srcs = glob(["**/**"]), visibility = ["//visibility:public"])"""

http_archive(
    name = "rapidcheck",
    build_file_content = all_contents,
    sha256 = "93f73c2c39ff91fd3a265b87b429ed266631c2425d9287d4548b149b99168736",
    strip_prefix = "rapidcheck-7acca63b8e834a74fd47fe8fbf17668d22cc6331",
    urls = ["https://github.com/emil-e/rapidcheck/archive/7acca63b8e834a74fd47fe8fbf17668d22cc6331.zip"],
)

http_archive(
    name = "gtest",
    sha256 = "927827c183d01734cc5cfef85e0ff3f5a92ffe6188e0d18e909c5efebf28a0c7",
    strip_prefix = "googletest-release-1.8.1",
    url = "https://github.com/google/googletest/archive/release-1.8.1.zip",
)

http_archive(
    name = "g3log",
    build_file = "@//external:g3log.BUILD",
    sha256 = "176fcf4e1634aba425549c32f76426d7976ab6973370785fd6b76986e9f7b20e",
    strip_prefix = "g3log-1.3.3",
    url = "https://github.com/KjellKod/g3log/archive/1.3.3.zip",
)

http_archive(
    name = "g3sinks",
    build_file = "@//external:g3sinks.BUILD",
    sha256 = "77632432de1ec456987c7d83c6eb163bb42f0eb9df6e0bdf63bcf7961c1f6c70",
    strip_prefix = "g3sinks-1.1.3",
    url = "https://github.com/KjellKod/g3sinks/archive/1.1.3.zip",
)

http_archive(
    name = "rules_proto",
    sha256 = "602e7161d9195e50246177e7c55b2f39950a9cf7366f74ed5f22fd45750cd208",
    strip_prefix = "rules_proto-97d8af4dc474595af3900dd85cb3a29ad28cc313",
    url = "https://github.com/bazelbuild/rules_proto/archive/97d8af4dc474595af3900dd85cb3a29ad28cc313.tar.gz",
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

git_repository(
    name = "com_github_nelhage_rules_boost",
    commit = "9f9fb8b2f0213989247c9d5c0e814a8451d18d7f",
    remote = "https://github.com/nelhage/rules_boost",
    shallow_since = "1570056263 -0700",
)

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")

boost_deps()

new_git_repository(
    name = "eigen",
    build_file = "@//external:eigen.BUILD",
    commit = "21ae2afd4edaa1b69782c67a54182d34efe43f9c",
    remote = "https://gitlab.com/libeigen/eigen.git",
    shallow_since = "1544551075 +0100",
)

# nanopb: lightweight protobuf library used on the STM32. The build file in the
# repo does not build the proto compiler (protoc) as a target, and is really complicated
# to set it up as a protobuf plugin due to lack of bazel support. So we use the archive
# which has both the headers and compiled protoc w/ the c support baked in.

http_archive(
    name = "nanopb",
    build_file = "@//external:nanopb.BUILD",
    sha256 = "e98dd6403ab8c5b271d32a6bc025e7e596bb181c7bc7e0492c5daa21fc44c940",
    strip_prefix = "nanopb-0.3.9.4-linux-x86",
    urls = [
        "https://jpa.kapsi.fi/nanopb/download/nanopb-0.3.9.4-linux-x86.tar.gz",
    ],
)

new_local_repository(
    name = "libusb",
    build_file = "@//external:libusb.BUILD",
    path = "/",
)

new_git_repository(
    name = "munkres_cpp",
    build_file = "@//external:munkres_cpp.BUILD",
    commit = "61086fcf5b3a8ad4bda578cdc2d1dca57b548786",
    remote = "https://github.com/saebyn/munkres-cpp.git",
    shallow_since = "1479502661 -0800",
)

# yaml cpp parser for dynamic parameters test
git_repository(
    name = "yaml-cpp",
    commit = "f531f8a8c3f8ca0923f9219c72fcca511555f824",
    remote = "https://github.com/jbeder/yaml-cpp.git",
    shallow_since = "1571237073 -0500",
)

# Qt bazel rules from https://github.com/justbuchanan/bazel_rules_qt
git_repository(
    name = "bazel_rules_qt",
    commit = "3f949bf4b5dcae2941ba3b71b3ddeb5d39637907",
    remote = "https://github.com/justbuchanan/bazel_rules_qt.git",
    shallow_since = "1549966854 -0800",
)

# Fake Function Framework
new_git_repository(
    name = "fff",
    build_file = "@//external:fff.BUILD",
    commit = "7e09f07e5b262b1cc826189dc5057379e40ce886",
    remote = "https://github.com/meekrosoft/fff.git",
    shallow_since = "1566392271 +0200",
)

# Right now qt5 is installed on the system using the setup_software.sh script
# We assume we can find the headers in the "standard" path used in this rule
new_local_repository(
    name = "qt",
    build_file = "@bazel_rules_qt//:qt.BUILD",
    path = "/usr/include/x86_64-linux-gnu/qt5/",
)

new_local_repository(
    name = "linux_gcc",
    build_file = "@//external:linux_gcc.BUILD",
    path = "/",
)

# libclang-dev is installed into the system through setup_software.sh
new_local_repository(
    name = "libclang",
    build_file = "@//external:libclang.BUILD",
    path = "/usr/lib/llvm-6.0/",
)

http_archive(
    name = "arm_developer_gcc",
    build_file = "@//external:arm_gcc.BUILD",
    sha256 = "b50b02b0a16e5aad8620e9d7c31110ef285c1dde28980b1a9448b764d77d8f92",
    strip_prefix = "gcc-arm-none-eabi-8-2019-q3-update",
    urls = [
        "https://developer.arm.com/-/media/Files/downloads/gnu-rm/8-2019q3/RC1.1/gcc-arm-none-eabi-8-2019-q3-update-linux.tar.bz2",
    ],
)

# We use our own fork of Box2D as we have made a few small modifications
# See the repository readme for details
new_git_repository(
    name = "box2d",
    build_file = "@//external:box2d.BUILD",
    commit = "bddb4ec7efc8a6630fcbe7ef913017d88fb9b4b1",
    remote = "https://github.com/UBC-Thunderbots/Box2D",
    shallow_since = "1571445859 -0700",
)

# tool used to flash firmware with bazel
git_repository(
    name = "platformio_rules",
    remote = "http://github.com/mum4k/platformio_rules.git",
    tag = "v0.0.10",
)

# Developer tools for working with bazel
git_repository(
    name = "bazel_buildtools",
    commit = "41a45edb9184de83dd29e2791bd995fbb73ea141",
    remote = "git@github.com:bazelbuild/buildtools.git",
)

# Needed for bazel buildifier: it is written in Go and hence needs rules_go to
# be built.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "b27e55d2dcc9e6020e17614ae6e0374818a3e3ce6f2024036e688ada24110444",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/rules_go/releases/download/v0.21.0/rules_go-v0.21.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.21.0/rules_go-v0.21.0.tar.gz",
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains()

# Needed for bazel buildifier
http_archive(
    name = "bazel_gazelle",
    sha256 = "be9296bfd64882e3c08e3283c58fcb461fa6dd3c171764fcc4cf322f60615a9b",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/0.18.1/bazel-gazelle-0.18.1.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

gazelle_dependencies()

# Bazel buildtools, provide us with the bazel formatter ("buildifier")
http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = "46ead728d66d48969f8ae3b88f2fd10fddfc80dd7903fb8b5bff9c568f0ebf25",
    strip_prefix = "buildtools-9e63c6f02e63adaab63e21a3a8feb75f4f7503cb",
    url = "https://github.com/bazelbuild/buildtools/archive/9e63c6f02e63adaab63e21a3a8feb75f4f7503cb.zip",
)

# State Machine Library
new_git_repository(
    name = "sml",
    build_file = "@//external:sml.BUILD",
    commit = "07a503cc3f18de2b861ea15d8357d3b3c0c978d6",  # Version `1.1.3`
    remote = "https://github.com/boost-ext/sml.git",
    shallow_since = "1596403987 -0600",
)

git_repository(
    name = "rules_python",
    commit = "6f37aa9966f53e063c41b7509a386d53a9f156c3",
    remote = "https://github.com/bazelbuild/rules_python.git",
    shallow_since = "1602800469 +1100",
)

# Based on the hermetic Python 3 guide found here
# https://thethoughtfulkoala.com/posts/2020/05/16/bazel-hermetic-python.html
_py_configure = "./configure --prefix=$(pwd)/bazel_install"

http_archive(
    name = "python_interpreter",
    build_file_content = """
exports_files(["python_bin"])
filegroup(
    name = "files",
    srcs = glob(["bazel_install/**"], exclude = ["**/* *"]),
    visibility = ["//visibility:public"],
)
cc_library(
    name = "python_headers",
    hdrs = glob(["bazel_install/include/python3.7/*.h"]),
    includes = ["bazel_install/include/python3.7"],
    visibility = ["//visibility:public"]
)
""",
    patch_cmds = [
        "mkdir $(pwd)/bazel_install",
        _py_configure,
        "make -j$(nproc)",
        "make install",
        "ln -s bazel_install/bin/python3 python_bin",
    ],
    sha256 = "91923007b05005b5f9bd46f3b9172248aea5abc1543e8a636d59e629c3331b01",
    strip_prefix = "Python-3.7.9",
    urls = ["https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz"],
)

register_toolchains("//:py_toolchain")

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@rules_python//python:pip.bzl", "pip_install")

pip_install(
    name = "python_control_deps",
    python_interpreter_target = "@python_interpreter//:python_bin",
    requirements = "//firmware/app/control/python_controller:requirements.txt",
)

pip_install(
    name = "dynamic_parameter_deps",
    python_interpreter_target = "@python_interpreter//:python_bin",
    requirements = "//shared/parameter/generation_scripts:requirements.txt",
)

pip_install(
    name = "nanopb_deps",
    python_interpreter_target = "@python_interpreter//:python_bin",
    requirements = "//external:nanopb_requirements.txt",
)

pip_install(
    name = "nanopb_deps",
    python_interpreter_target = "@python_interpreter//:python_bin",
    requirements = "//external:nanopb_requirements.txt",
)

pip_install(
    name = "python_tools_deps",
    python_interpreter_target = "@python_interpreter//:python_bin",
    requirements = "//python_tools:requirements.txt",
)

# required to use `py_proto_library` from protobuf
http_archive(
    name = "six_archive",
    build_file = "//external:six.BUILD",
    sha256 = "105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a",
    url = "https://pypi.python.org/packages/source/s/six/six-1.10.0.tar.gz#md5=34eed507548117b2ab523ab14b2f8b55",
)

bind(
    name = "six",
    actual = "@six_archive//:six",
)

# pybind11 for Python bindings
# quval's repo for pybind11 bazel rules has a fix for hermetic python interpreter. The pybind11 project's own
# bazel repo uses the system shell to find the system python interpreter and associated headers, and will not
# work with how we build our own interpreter. This has an additional patch for Python 3.7.9, as pyconfig.h
# is placed in a different directory than the rest of the Python headers.
http_archive(
    name = "pybind11_bazel",
    patch_args = ["-p1"],
    patches = [
        "//external:pybind11_bazel_pyconfig_fix.patch",
    ],
    sha256 = "b26d183b3b0ff09a8f6ed6332e92599500ca3363a451bfbda863f69782af5d91",
    strip_prefix = "pybind11_bazel-938e4c46b8d66967cda41a1d2513f69d37faa2b3",
    urls = ["https://github.com/quval/pybind11_bazel/archive/938e4c46b8d66967cda41a1d2513f69d37faa2b3.zip"],
)

# We still require the pybind library.
http_archive(
    name = "pybind11",
    build_file = "@pybind11_bazel//:pybind11.BUILD",
    sha256 = "8ff2fff22df038f5cd02cea8af56622bc67f5b64534f1b83b9f133b8366acff2",
    strip_prefix = "pybind11-2.6.2",
    urls = ["https://github.com/pybind/pybind11/archive/v2.6.2.tar.gz"],
)

load("@pybind11_bazel//:python_configure.bzl", "python_configure")

python_configure(
    name = "local_config_python",
    python_interpreter_target = "@python_interpreter//:python_bin",
)
