#pragma once

#include "software/ai/hl/stp/skill/skill_fsm.h"
#include "software/ai/hl/stp/tactic/tactic.h"

/**
 * AssignedSkillTactic executes primitives generated by a Skill FSM,
 * enabling testing of Skills in simulated gameplay tests.
 *
 * To create an AssignedSkillTactic, use the TypedAssignedSkillTactic
 * template with the Skill FSM to execute as the template argument.
 */
class AssignedSkillTactic : public Tactic
{
   protected:
    explicit AssignedSkillTactic()
        : Tactic({RobotCapability::Kick, RobotCapability::Chip, RobotCapability::Move})
    {
    }

    inline void accept(TacticVisitor& visitor) const override
    {
        visitor.visit(*this);
    }
};

/**
 * This template lets us generate subtypes of AssignedSkillTactic associated
 * with a Skill FSM to execute.
 *
 * @tparam TSkillFSM the type of Skill FSM that this tactic will execute
 */
template <typename TSkillFSM>
class TypedAssignedSkillTactic : public AssignedSkillTactic
{
   public:
    /**
     * Creates a new TypedAssignedSkillTactic 
     * 
     * @param skill_fsm_factory function that takes no arguments and will return
     * a unique_ptr to a new instance of FSM<TSkillFSM>
     * @param strategy the current Strategy
     */
    explicit TypedAssignedSkillTactic(
        std::function<std::unique_ptr<FSM<TSkillFSM>>()> skill_fsm_factory,
        std::shared_ptr<Strategy> strategy)
        : AssignedSkillTactic(),
          strategy_(strategy),
          skill_fsm_factory_(skill_fsm_factory),
          fsm_map(),
          control_params_()
    {
    }

    TypedAssignedSkillTactic() = delete;

    /**
     * Updates the control params for the Skill FSM that this tactic is executing
     * 
     * @param control_params the new control params to overwrite the current params with
     */
    void updateControlParams(const typename TSkillFSM::ControlParams& control_params);

    DEFINE_TACTIC_DONE_AND_GET_FSM_STATE

   private:
    std::shared_ptr<Strategy> strategy_;

    std::function<std::unique_ptr<FSM<TSkillFSM>>()> skill_fsm_factory_;
    std::map<RobotId, std::unique_ptr<FSM<TSkillFSM>>> fsm_map;

    TSkillFSM::ControlParams control_params_;

    void updatePrimitive(const TacticUpdate& tactic_update, bool reset_fsm) override;
};

template <typename TSkillFSM>
void TypedAssignedSkillTactic<TSkillFSM>::updateControlParams(
    const typename TSkillFSM::ControlParams& control_params)
{
    control_params_ = control_params;
}

template <typename TSkillFSM>
void TypedAssignedSkillTactic<TSkillFSM>::updatePrimitive(
    const TacticUpdate& tactic_update, bool reset_fsm)
{
    if (reset_fsm)
    {
        fsm_map[tactic_update.robot.id()] = skill_fsm_factory_();
    }
    
    fsm_map[tactic_update.robot.id()]->process_event(typename TSkillFSM::Update(
        control_params_, SkillUpdate(tactic_update.robot, tactic_update.world, strategy_,
                                     tactic_update.set_primitive)));
}
