#pragma once

#include "software/ai/hl/stp/skill/skill_fsm.h"
#include "software/ai/hl/stp/tactic/tactic.h"

/**
 * SkillTactic executes primitives generated by a Skill FSM, enabling testing
 * of Skills in simulated gameplay tests.
 *
 * To create a SkillTactic, use the AssignedSkillTactic template with the
 * Skill FSM to execute as the template argument.
 */
class SkillTactic : public Tactic
{
   protected:
    explicit SkillTactic()
        : Tactic({RobotCapability::Kick, RobotCapability::Chip, RobotCapability::Move})
    {
    }

    inline void accept(TacticVisitor& visitor) const override
    {
        visitor.visit(*this);
    }
};

/**
 * This template lets us generate subtypes of SkillTactic associated
 * with a Skill FSM to execute.
 *
 * @tparam TSkillFSM the type of Skill FSM that this tactic will execute
 */
template <typename TSkillFSM, typename... TSkillSubFSMs>
class AssignedSkillTactic : public SkillTactic
{
   public:
    /**
     * Creates a new AssignedSkillTactic
     *
     * @param strategy the current Strategy
     */
    explicit AssignedSkillTactic(std::shared_ptr<Strategy> strategy)
        : SkillTactic(), strategy_(strategy), fsm_map(), control_params_()
    {
    }

    AssignedSkillTactic() = delete;

    /**
     * Updates the control params for the Skill FSM that this tactic is executing
     *
     * @param control_params the new control params to overwrite the current params with
     */
    void updateControlParams(const typename TSkillFSM::ControlParams& control_params);

    DEFINE_TACTIC_DONE_AND_GET_FSM_STATE

   private:
    std::shared_ptr<Strategy> strategy_;

    std::map<RobotId, std::unique_ptr<FSM<TSkillFSM>>> fsm_map;
    TSkillFSM::ControlParams control_params_;

    void updatePrimitive(const TacticUpdate& tactic_update, bool reset_fsm) override;
};

template <typename TSkillFSM, typename... TSkillSubFSMs>
void AssignedSkillTactic<TSkillFSM, TSkillSubFSMs...>::updateControlParams(
    const typename TSkillFSM::ControlParams& control_params)
{
    control_params_ = control_params;
}

template <typename TSkillFSM, typename... TSkillSubFSMs>
void AssignedSkillTactic<TSkillFSM, TSkillSubFSMs...>::updatePrimitive(
    const TacticUpdate& tactic_update, bool reset_fsm)
{
    if (reset_fsm)
    {
        fsm_map[tactic_update.robot.id()] =
            std::make_unique<FSM<TSkillFSM>>(TSkillSubFSMs()..., TSkillFSM());
    }

    fsm_map[tactic_update.robot.id()]->process_event(typename TSkillFSM::Update(
        control_params_, SkillUpdate(tactic_update.robot, tactic_update.world_ptr,
                                     strategy_, tactic_update.set_primitive)));
}
