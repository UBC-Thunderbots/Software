---

- name: Remote flashing
  hosts: THUNDERBOTS_HOSTS
  vars:
   all_services:
     - thunderloop
     - display
     - wifi_announcement
     - ethernet_announcement
   all_actions:
     - stop
     - sync
     - start
   binary_paths:
     thunderloop: ../../thunderloop_main
     announcement: ../../broadcasts/robot_broadcast_sender.zip
     display: ../../display/robot_ui.zip

  tasks:

    - debug:
        msg: "[Robot ID = {{ inventory_hostname }}]"
      tags: always

    - name: Extract services & actions from tags
      set_fact:
        services: "{{ all_services if ansible_run_tags | intersect(all_services)|length == 0 else ansible_run_tags | intersect(all_services) }}"
        actions: "{{ all_actions if ansible_run_tags|intersect(all_actions)|length == 0 else ansible_run_tags | intersect(all_actions)}}"
      tags: always

    - name: Start Flash Process
      block:
        - name: Stop Services
          become: true
          become_method: sudo
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            masked: no
            daemon_reload: yes
            state: stopped
          with_items: "{{ services }}"
          loop_control:
            loop_var: service_name
          when: "'stop' in actions"
          tags: always

        - name: Delete everything on ~/
          file:
            state: absent
            path: /home/robot/thunderbots_binaries
          become_method: sudo
          become: true
          register: result

        - name: Sync Binaries
          with_items:
            - ../../display/robot_ui.zip
            - ../../broadcasts/robot_broadcast_sender.zip
            - ../../thunderloop_main
          loop_control:
            loop_var: binary_path
          ansible.posix.synchronize:
            src: "{{ binary_path }}"
            dest: ~/thunderbots_binaries/
            recursive: yes
            copy_links: yes
          tags:
            - syncBinaries

        - name: Unzipping python binaries
          command: 'unzip ~/thunderbots_binaries/*.zip'
          register: result
          args:
            chdir: ~/thunderbots_binaries

        - name: Start Services
          become: true
          become_method: sudo
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            masked: no
            daemon_reload: yes
            state: started
          with_items: "{{ services }}"
          loop_control:
            loop_var: service_name
          when: "'start' in actions"
          tags: always

      # Rescue section only runs if any task in this block fails
      rescue:
        - name: Error Recovery - Ensure Announcement Services are Running
          become: true
          become_method: sudo
          ansible.builtin.systemd:
            name: wifi_announcement
            masked: no
            daemon_reload: yes
            state: started
          ansible.builtin.systemd:
            name: ethernet_announcement
            masked: no
            daemon_reload: yes
            state: started
