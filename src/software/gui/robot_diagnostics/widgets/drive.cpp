#include "software/gui/robot_diagnostics/widgets/drive.h"

void setupDrive(Ui::AutoGeneratedMainWidget* widget,
                std::function<void(double, DirectPerWheelMode)>
                    direct_per_wheel_power_changed_callback,
                std::function<void(double, DirectVelocityMode)>
                    direct_velocity_power_changed_callback)
{
    setupDirectPerWheel(widget, direct_per_wheel_power_changed_callback);
    setupDirectVelocity(widget, direct_velocity_power_changed_callback);
}


void setupDirectPerWheel(Ui::AutoGeneratedMainWidget* widget,
                         std::function<void(double, DirectPerWheelMode)>
                             direct_per_wheel_power_changed_callback)
{
    auto direct_per_wheel_power_fl_changed = [direct_per_wheel_power_changed_callback](
                                                 double value) {
        direct_per_wheel_power_changed_callback(value, DirectPerWheelMode::FRONT_LEFT);
    };
    auto direct_per_wheel_power_fr_changed = [direct_per_wheel_power_changed_callback](
                                                 double value) {
        direct_per_wheel_power_changed_callback(value, DirectPerWheelMode::FRONT_RIGHT);
    };
    auto direct_per_wheel_power_bl_changed =
        [direct_per_wheel_power_changed_callback](double value) {
            direct_per_wheel_power_changed_callback(value, DirectPerWheelMode::BACK_LEFT);
        };
    auto direct_per_wheel_power_br_changed = [direct_per_wheel_power_changed_callback](
                                                 double value) {
        direct_per_wheel_power_changed_callback(value, DirectPerWheelMode::BACK_RIGHT);
    };

    // we give the wheel some % of power
    setupSliderLineEdit(widget->lineEdit_direct_per_wheel_fl,
                        widget->slider_direct_per_wheel_fl,
                        direct_per_wheel_power_fl_changed, -100.0, 100.0, 1.0);
    setupSliderLineEdit(widget->lineEdit_direct_per_wheel_fr,
                        widget->slider_direct_per_wheel_fr,
                        direct_per_wheel_power_fr_changed, -100.0, 100.0, 1.0);
    setupSliderLineEdit(widget->lineEdit_direct_per_wheel_bl,
                        widget->slider_direct_per_wheel_bl,
                        direct_per_wheel_power_bl_changed, -100.0, 100.0, 1.0);
    setupSliderLineEdit(widget->lineEdit_direct_per_wheel_br,
                        widget->slider_direct_per_wheel_br,
                        direct_per_wheel_power_br_changed, -100.0, 100.0, 1.0);

    auto direct_per_wheel_stop_pushed = [widget,
                                         direct_per_wheel_power_changed_callback]() {
        // Reset sliders
        widget->lineEdit_direct_per_wheel_fl->setText(QString::number(0));
        widget->slider_direct_per_wheel_fl->setValue(0);
        widget->lineEdit_direct_per_wheel_fr->setText(QString::number(0));
        widget->slider_direct_per_wheel_fr->setValue(0);
        widget->lineEdit_direct_per_wheel_bl->setText(QString::number(0));
        widget->slider_direct_per_wheel_bl->setValue(0);
        widget->lineEdit_direct_per_wheel_br->setText(QString::number(0));
        widget->slider_direct_per_wheel_br->setValue(0);

        direct_per_wheel_power_changed_callback(0, DirectPerWheelMode::FRONT_LEFT);
        direct_per_wheel_power_changed_callback(0, DirectPerWheelMode::FRONT_RIGHT);
        direct_per_wheel_power_changed_callback(0, DirectPerWheelMode::BACK_LEFT);
        direct_per_wheel_power_changed_callback(0, DirectPerWheelMode::BACK_RIGHT);
    };

    QWidget::connect(widget->pushButton_direct_per_wheel_stop, &QPushButton::clicked,
                     direct_per_wheel_stop_pushed);
}

void setupDirectVelocity(Ui::AutoGeneratedMainWidget* widget,
                         std::function<void(double, DirectVelocityMode)>
                             direct_velocity_power_changed_callback)
{
    // x/y velocities are in m/s
    auto direct_velocity_x_vel_changed =
        [direct_velocity_power_changed_callback](double value) {
            direct_velocity_power_changed_callback(value, DirectVelocityMode::X_VEL);
        };
    auto direct_velocity_y_vel_changed =
        [direct_velocity_power_changed_callback](double value) {
            direct_velocity_power_changed_callback(value, DirectVelocityMode::Y_VEL);
        };
    // angular velocities are in Â°/s
    auto direct_velocity_angular_vel_changed = [direct_velocity_power_changed_callback](
                                                   double value) {
        direct_velocity_power_changed_callback(value, DirectVelocityMode::ANGULAR_VEL);
    };

    setupSliderLineEdit(widget->lineEdit_direct_velocity_x,
                        widget->slider_direct_velocity_x, direct_velocity_x_vel_changed,
                        -10.0, 10.0, 100.0);
    setupSliderLineEdit(widget->lineEdit_direct_velocity_y,
                        widget->slider_direct_velocity_y, direct_velocity_y_vel_changed,
                        -10.0, 10.0, 100.0);
    setupSliderLineEdit(widget->lineEdit_direct_velocity_theta,
                        widget->slider_direct_velocity_theta,
                        direct_velocity_angular_vel_changed, -1000.0, 1000.0, 1.0);

    auto direct_velocity_stop_pushed = [widget,
                                        direct_velocity_power_changed_callback]() {
        // Reset sliders
        widget->lineEdit_direct_velocity_x->setText(QString::number(0));
        widget->slider_direct_velocity_x->setValue(0);
        widget->lineEdit_direct_velocity_y->setText(QString::number(0));
        widget->slider_direct_velocity_y->setValue(0);
        widget->lineEdit_direct_velocity_theta->setText(QString::number(0));
        widget->slider_direct_velocity_theta->setValue(0);

        direct_velocity_power_changed_callback(0, DirectVelocityMode::X_VEL);
        direct_velocity_power_changed_callback(0, DirectVelocityMode::Y_VEL);
        direct_velocity_power_changed_callback(0, DirectVelocityMode::ANGULAR_VEL);
    };

    QWidget::connect(widget->pushButton_direct_velocity_stop, &QPushButton::clicked,
                     direct_velocity_stop_pushed);
}
