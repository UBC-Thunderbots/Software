#include "software/gui/robot_diagnostics/widgets/sensor_status.h"

#include "shared/constants.h"

void setupSensorStatus(Ui::AutoGeneratedMainWidget* widget,
                       const RobotConstants_t& robot_constants)
{
    widget->progressBar_battery->setupProgressBar(20, "%1 V");
    widget->progressBar_capacitor->setupProgressBar(200, "%1 V");
    widget->progressBar_dribbler_speed->setupProgressBar(
        static_cast<int>(robot_constants.max_force_dribbler_speed_rpm), "%1 RPM");
    widget->progressBar_break_beam->setupProgressBar(100, "%1%");
    widget->progressBar_dribbler_temp->setupProgressBar(100, "%1 °C");
    widget->progressBar_board_temp->setupProgressBar(100, "%1 °C");
}

void updateSensorStatus(Ui::AutoGeneratedMainWidget* widget,
                        const SensorProto& sensor_msg)
{
    for (const auto& robot_msg : sensor_msg.robot_status_msgs())
    {
        // update status progress bars
        widget->progressBar_battery->updateProgressBar(
            robot_msg.power_status().battery_voltage());
        widget->progressBar_capacitor->updateProgressBar(
            robot_msg.power_status().capacitor_voltage());
        widget->progressBar_dribbler_speed->updateProgressBar(
            robot_msg.dribbler_status().dribbler_rpm());

        // break beam reading is from [0,1] and we want it displayed as a percent so it is
        // multiplied by 100 to map to [0,100]
        widget->progressBar_break_beam->updateProgressBar(
            robot_msg.break_beam_status().break_beam_reading() * 100);

        // update temperature progress bars
        widget->progressBar_dribbler_temp->updateProgressBar(
            robot_msg.temperature_status().dribbler_temperature());
        widget->progressBar_board_temp->updateProgressBar(
            robot_msg.temperature_status().board_temperature());
    }
}
