#pragma once

#include <QtWidgets/QWidget>

#include "software/gui/generic_widgets/slider/slider.h"
#include "software/util/make_enum/make_enum.h"

// This include is autogenerated by the .ui file in the same folder
// The generated version will be names 'ui_<filename>.h'
#include "software/gui/robot_diagnostics/ui/ui_main_widget.h"

MAKE_ENUM(DirectPerWheelMode, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, );

MAKE_ENUM(DirectVelocityMode, X_VEL, Y_VEL, ANGULAR_VEL, );

/**
 * Set up drive area of the widget
 *
 * @param widget widget to setup
 * @param direct_per_wheel_power_changed_callback callback on changing direct per wheel
 * power input
 * @param direct_velocity_power_changed_callback callback on changing direct velocity
 * power input
 */
void setupDrive(Ui::AutoGeneratedMainWidget* widget,
                std::function<void(double, DirectPerWheelMode)>
                    direct_per_wheel_power_changed_callback,
                std::function<void(double, DirectVelocityMode)>
                    direct_velocity_power_changed_callback);

/**
 * Set up direct per wheel tab of the drive area
 *
 * @param widget widget to setup
 * @param direct_per_wheel_power_changed_callback callback on changing direct per wheel
 * power input
 */
void setupDirectPerWheel(Ui::AutoGeneratedMainWidget* widget,
                         std::function<void(double, DirectPerWheelMode)>
                             direct_per_wheel_power_changed_callback);

/**
 * Set up direct velocity tab of the drive area
 *
 * @param widget widget to setup
 * @param direct_velocity_power_changed_callback callback on changing direct per wheel
 * power input
 */
void setupDirectVelocity(Ui::AutoGeneratedMainWidget* widget,
                         std::function<void(double, DirectVelocityMode)>
                             direct_velocity_power_changed_callback);
