#pragma once

#include <QtWidgets/QMainWindow>

#include "software/gui/robot_diagnostics/ui/ui_main_widget.h"
#include "software/gui/robot_diagnostics/widgets/chicker.h"
#include "software/gui/robot_diagnostics/widgets/dribbler.h"
#include "software/gui/robot_diagnostics/widgets/drive.h"
#include "software/gui/robot_diagnostics/widgets/feedback.h"
#include "software/gui/robot_diagnostics/widgets/leds.h"
#include "software/gui/robot_diagnostics/widgets/robot_selection.h"

// Forward declare the name of the top-level GUI class defined in main_widget.ui
namespace Ui
{
    class AutoGeneratedMainWidget;
}

class MainWidget : public QMainWindow
{
    Q_OBJECT

   public:
    explicit MainWidget(QWidget* parent = nullptr);

   private:
    // The "parent" of each of these widgets is set during construction; meaning that
    // the Qt system takes ownership of the pointer and is responsible for de-allocating
    // it; so we don't have to
    Ui::AutoGeneratedMainWidget* main_widget;

    // Indicates which robot we're communicating with
    unsigned int robot_selection;

    // dribbler chicker controls
    double dribbler_power;
    double chicker_power;
    bool chicker_autochick;

    // dribbler controls
    std::function<void(double)> dribbler_power_changed_callback;

    // drive controls
    std::function<void(double, DirectPerWheelMode)>
        direct_per_wheel_power_changed_callback;
    std::function<void(double, DirectVelocityMode)>
        direct_velocity_power_changed_callback;

    double direct_per_wheel_power_fl;
    double direct_per_wheel_power_fr;
    double direct_per_wheel_power_bl;
    double direct_per_wheel_power_br;
    double matrix_x_vel;
    double matrix_y_vel;
    double matrix_angular_vel;
    std::string led_mode;
};

void setupFeedbackDisplay(Ui::AutoGeneratedMainWidget* widget);

void setupDribblerTemperature(Ui::AutoGeneratedMainWidget* widget);
