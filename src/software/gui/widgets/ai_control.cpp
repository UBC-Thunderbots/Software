#include "software/gui/widgets/ai_control.h"

#include <QtWidgets/QComboBox>
#include <QtWidgets/QPushButton>
#include <g3log/g3log.hpp>

#include "software/ai/hl/stp/play/play_factory.h"
#include "software/util/parameter/dynamic_parameters.h"

void setupAIControls(Ui::AutoGeneratedMainWidget *widget)
{
    setupAIStartAndStopButtons(widget);
    setupTeamColourComboBox(widget);
    setupDefendingSideComboBox(widget);
    setupGameStateOverrideComboBox(widget);
    setupPlayOverrideComboBox(widget);
}

void setupAIStartAndStopButtons(Ui::AutoGeneratedMainWidget *widget)
{
    auto start_ai_func = []() {
        Util::MutableDynamicParameters->getMutableAIConfig()->mutableRunAI()->setValue(
            true);
    };
    QWidget::connect(widget->start_ai_button, &QPushButton::clicked, start_ai_func);
    auto stop_ai_func = []() {
        Util::MutableDynamicParameters->getMutableAIConfig()->mutableRunAI()->setValue(
            false);
    };
    QWidget::connect(widget->stop_ai_button, &QPushButton::clicked, stop_ai_func);
}

void setupTeamColourComboBox(Ui::AutoGeneratedMainWidget *widget)
{
    widget->team_colour_combo_box->insertItem(0, "Yellow");
    widget->team_colour_combo_box->insertItem(1, "Blue");
    widget->team_colour_combo_box->insertItem(2, "Use Refbox");
    auto on_team_colour_changed = [](const QString &text) {
        if (text == "Yellow")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxFriendlyTeamColor()
                ->setValue(true);
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableFriendlyColorYellow()
                ->setValue(true);
        }
        else if (text == "Blue")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxFriendlyTeamColor()
                ->setValue(true);
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableFriendlyColorYellow()
                ->setValue(false);
        }
        else if (text == "Use Refbox")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxFriendlyTeamColor()
                ->setValue(false);
        }
        else
        {
            LOG(FATAL) << "Tried to set the team colour with an invalid value: '"
                       << text.toStdString() << "'" << std::endl;
        }
    };
    QWidget::connect(widget->team_colour_combo_box, &QComboBox::currentTextChanged,
                     on_team_colour_changed);
}

void setupGameStateOverrideComboBox(Ui::AutoGeneratedMainWidget *widget)
{
    // TODO: Set this up using factory values like the play override once a factory of
    // these values is available
    widget->gamestate_override_combo_box->insertItem(0, "None");
    widget->gamestate_override_combo_box->insertItem(1, "Play");
    widget->gamestate_override_combo_box->insertItem(2, "Halt");
    widget->gamestate_override_combo_box->insertItem(3, "Stop");

    auto on_gamestate_changed = [](const QString &text) {
        if (text == "Use Refbox")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxPlay()
                ->setValue(false);
        }
        else
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxPlay()
                ->setValue(true);
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableCurrentRefboxPlay()
                ->setValue(text.toStdString());
        }
    };
    QWidget::connect(widget->gamestate_override_combo_box, &QComboBox::currentTextChanged,
                     on_gamestate_changed);
}

void setupDefendingSideComboBox(Ui::AutoGeneratedMainWidget *widget)
{
    // See issue #811 for getting these value from an enum / factory
    widget->defending_side_combo_box->insertItem(0, "Use Refbox");
    widget->defending_side_combo_box->insertItem(1, "East");
    widget->defending_side_combo_box->insertItem(2, "West");

    auto on_defending_side_changed = [](const QString &text) {
        if (text == "Use Refbox")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxDefendingSide()
                ->setValue(false);
        }
        else if (text == "East")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableOverrideRefboxDefendingSide()
                ->setValue(true);
            // TODO: Confirm how East and West map to positive and negative sides
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableDefendingPositiveSide()
                ->setValue(false);
        }
        else if (text == "West")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->mutableOverrideAIPlay()
                ->setValue(false);
            // TODO: Confirm how East and West map to positive and negative sides
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->getMutableRefboxConfig()
                ->mutableDefendingPositiveSide()
                ->setValue(true);
        }
        else
        {
            LOG(FATAL) << "Tried to set the defending side with an invalid value: '"
                       << text.toStdString() << "'" << std::endl;
        }
    };
    QWidget::connect(widget->defending_side_combo_box, &QComboBox::currentTextChanged,
                     on_defending_side_changed);
}

void setupPlayOverrideComboBox(Ui::AutoGeneratedMainWidget *widget)
{
    auto play_names = PlayFactory::getRegisteredPlayNames();
    // Sort the entries in alphabetical order from a-z
    std::sort(play_names.begin(), play_names.end());

    // Create a new list with all the play names converted to QStrings
    QList<QString> qt_play_names;
    std::transform(play_names.begin(), play_names.end(),
                   std::back_inserter(qt_play_names),
                   [](std::string name) { return QString::fromStdString(name); });

    widget->play_override_combo_box->insertItem(0, "Use AI Selection");
    widget->play_override_combo_box->insertItems(1, qt_play_names);

    auto on_play_changed = [](const QString &text) {
        if (text == "Use AI Selection")
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->mutableOverrideAIPlay()
                ->setValue(false);
        }
        else
        {
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->mutableOverrideAIPlay()
                ->setValue(true);
            Util::MutableDynamicParameters->getMutableAIConfig()
                ->mutableCurrentAIPlay()
                ->setValue(text.toStdString());
        }
    };
    QWidget::connect(widget->play_override_combo_box, &QComboBox::currentTextChanged,
                     on_play_changed);
}
