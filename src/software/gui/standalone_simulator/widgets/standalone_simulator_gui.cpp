#include "software/gui/standalone_simulator/widgets/standalone_simulator_gui.h"

#include "software/gui/drawing/ssl_wrapper_packet.h"
#include "software/gui/geometry_conversion.h"
#include "software/world/field.h"

StandaloneSimulatorGUI::StandaloneSimulatorGUI(
    std::shared_ptr<ThreadSafeBuffer<SSL_WrapperPacket>> ssl_wrapper_packet_buffer,
    std::shared_ptr<ThreadSafeBuffer<Rectangle>> view_area_buffer)
    : QMainWindow(),
      main_widget(new Ui::AutogeneratedStandaloneSimulatorMainWidget()),
      update_timer(new QTimer(this)),
      ssl_wrapper_packet_buffer(ssl_wrapper_packet_buffer),
      view_area_buffer(view_area_buffer)
{
    // Create a new widget that will contain all the autogenerated
    // components defined in the .ui file. Note that because the
    // setCentralWidget call will cause this class (the Qt QMainWindow)
    // to take ownership of the widget and handle its deletion, we
    // do not need to make this a class member and delete it ourself.
    QWidget* central_widget = new QWidget(this);
    main_widget->setupUi(central_widget);
    setCentralWidget(central_widget);

    connect(update_timer, &QTimer::timeout, this, &StandaloneSimulatorGUI::handleUpdate);
    update_timer->start(static_cast<int>(
        Duration::fromSeconds(UPDATE_INTERVAL_SECONDS).getMilliseconds()));
}

void StandaloneSimulatorGUI::handleUpdate()
{
    draw();
    updateDrawViewArea();
}

void StandaloneSimulatorGUI::draw()
{
    auto ssl_wrapper_packet = ssl_wrapper_packet_buffer->popMostRecentlyAddedValue();
    if (ssl_wrapper_packet)
    {
        auto draw_function = getDrawSSLWrapperPacketFunction(*ssl_wrapper_packet);
        main_widget->simulation_graphics_view->clearAndDraw(
            {draw_function.getDrawFunction()});
    }
}

void StandaloneSimulatorGUI::updateDrawViewArea()
{
    std::optional<Rectangle> view_area = view_area_buffer->popLeastRecentlyAddedValue();
    if (view_area)
    {
        main_widget->simulation_graphics_view->setViewArea(view_area.value());
    }
}
