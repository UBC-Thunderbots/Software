#pragma once

#include <QtCore/QTimer>
#include <QtWidgets/QMainWindow>

// .ui files are autogenerated to 'ui_<filename>.h`
#include "software/gui/standalone_simulator/ui/ui_main_widget.h"
#include "software/multithreading/thread_safe_buffer.h"
#include "software/new_geom/rectangle.h"
#include "software/proto/messages_robocup_ssl_wrapper.pb.h"
#include "software/simulation/standalone_simulator.h"

/**
 * This class is the main application window for the StandaloneSimulatorGUI.
 * It organizes top-level widgets (if needed) into a layout and sets up
 * any callbacks required for asynchronous operations.
 */
class StandaloneSimulatorGUI : public QMainWindow
{
    Q_OBJECT

   public:
    /**
     * Creates a new StandaloneSimulatorGUI
     *
     * @pre simulator must point to a valid StandaloneSimulator (ie. must not be null)
     *
     * @param simulator The StandaloneSimulator this GUI will control
     */
    explicit StandaloneSimulatorGUI(std::shared_ptr<StandaloneSimulator> simulator);

   private:
    /**
     * This function is called periodically by the update_timer to
     * perform various actions at a fixed rate.
     */
    void handleUpdate();

    /**
     * Draws all the contents of the most recently received SSL_WrapperPacket,
     * and updates the view area if necessary.
     */
    void draw();

    /**
     * Updates the area of the World being drawn in the FullSystemGUI
     */
    void updateDrawViewArea();

    // The "parent" of each of these widgets is set during construction, meaning that
    // the Qt system takes ownership of the pointer and is responsible for de-allocating
    // it, so we don't have to
    Ui::AutogeneratedStandaloneSimulatorMainWidget* main_widget;
    QTimer* update_timer;

    std::shared_ptr<StandaloneSimulator> standalone_simulator;

    static constexpr double UPDATE_INTERVAL_SECONDS = 1.0 / 60.0;

    // When the application starts up we want to set the initial view area
    // to show all the contents nicely. For some reason doing this only
    // once at the start of the program isn't enough, the GUI seems to need
    // a few iterations to fully render everything before the view area will
    // be set correctly (otherwise the contents tend to be zoomed-out and
    // offset). This is set to an arbitrary value that is small enough the
    // user doesn't notice they don't have control on startup, but
    // successfully sets the area.
    static constexpr int NUM_ATTEMPTS_TO_SET_INITIAL_VIEW_AREA = 5;
    int remaining_attempts_to_set_view_area;
};
