#pragma once

#include <QtWidgets/QGraphicsScene>
#include <QtWidgets/QOpenGLWidget>
#include <QtWidgets/QWidget>

// .ui files are autogenerated to 'ui_<filename>.h`
#include "software/gui/drawing/draw_functions.h"
#include "software/gui/standalone_simulator/ui/ui_main_widget.h"

// Forward declare the name of the top-level GUI class defined in main_widget.ui
namespace Ui
{
    class AutoGeneratedMainWidget;
}

/**
 * This class acts as a wrapper widget for all the autogenerated components
 * defined in main_widget.ui
 */
class MainWidget : public QWidget
{
    Q_OBJECT

   public:
    explicit MainWidget(QWidget* parent = nullptr);

   public slots:
    /**
     * Clears the scene and draws all given DrawFunctions, in the order
     * they are provided
     *
     * @param draw_functions The DrawFunctions to draw on the scene
     */
    void draw(const std::vector<DrawFunction>& draw_functions);

    /**
     * Sets the area of the scene being drawn in the SimulatorGUI to the given region
     *
     * @param new_view_area The new area to show in the view
     */
    void setDrawViewArea(const QRectF& new_view_area);

   private:
    // The "parent" of each of these widgets is set during construction, meaning that
    // the Qt system takes ownership of the pointer and is responsible for de-allocating
    // it, so we don't have to
    Ui::AutoGeneratedMainWidget* main_widget;
    QGraphicsScene* scene;
    QOpenGLWidget* glWidget;
};
