---
- name: Remote flashing
  hosts: THUNDERBOTS_HOSTS
  vars:
    all_services:
      - thunderloop
    all_actions:
      - stop
      - sync
      - start
    binary_paths:
      thunderloop: ../../thunderloop_main
    archive_paths:
      robot_diagnostics_cli_tar: ../../robot_diagnostics_cli/robot_diagnostics_cli_tar.tar.gz

  tasks:
    - name: Log Robot ID
      ansible.builtin.debug:
        msg: "[Robot ID = {{ inventory_hostname }}]"
      tags: always

    - name: Extract services & actions from tags
      ansible.builtin.set_fact:
        services: "{{ all_services if ansible_run_tags | intersect(all_services) | length == 0 else ansible_run_tags | intersect(all_services) }}"
        actions: "{{ all_actions if ansible_run_tags | intersect(all_actions) | length == 0 else ansible_run_tags | intersect(all_actions) }}"
      tags: always

    - name: Log Services & Actions to Run
      ansible.builtin.debug:
        msg: "Performing the following actions: {{ actions }} on the following services: {{ services }}"
      tags: always

    - name: Start Flash Process
      block:
        - name: Stop Services
          become: true
          become_method: ansible.builtin.sudo
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            masked: false
            daemon_reload: true
            state: stopped
          with_items: "{{ services }}"
          loop_control:
            loop_var: service_name
          when: "'stop' in actions"
          tags: always

        - name: Delete everything on ~/
          ansible.builtin.file:
            state: absent
            path: /home/robot/thunderbots_binaries
          become_method: ansible.builtin.sudo
          become: true
          register: result

        - name: Sync Binaries
          ansible.posix.synchronize:
            src: "{{ binary_paths[service_name] }}"
            dest: ~/thunderbots_binaries/
            recursive: true
            copy_links: true
          with_items: "{{ services }}"
          loop_control:
            loop_var: service_name
          when: "'sync' in actions"
          tags: always

        - name: Sync Archived Binaries
          with_items: "{{ archive_paths }}"
          loop_control:
            loop_var: archive_name
          ansible.posix.synchronize:
            src: "{{ archive_paths[archive_name] }}"
            dest: ~/thunderbots_binaries/
            recursive: true
            copy_links: true
          tags: always

        - name: Unarchiving Binaries
          with_items: "{{ archive_paths }}"
          loop_control:
            loop_var: archive_name
          ansible.builtin.unarchive:
            src: "~/thunderbots_binaries/{{ archive_name }}.tar.gz"
            dest: ~/thunderbots_binaries/
            remote_src: true

        - name: Create Link to Diagnostics CLI
          ansible.builtin.file:
            src: /home/robot/thunderbots_binaries/robot_diagnostics_cli
            dest: /home/robot/tbots_cli
            state: link
            force: true

        - name: Start Services
          become: true
          become_method: ansible.builtin.sudo
          ansible.builtin.systemd:
            name: "{{ service_name }}"
            masked: false
            daemon_reload: true
            state: started
          with_items: "{{ services }}"
          loop_control:
            loop_var: service_name
          when: "'start' in actions"
          tags: always
