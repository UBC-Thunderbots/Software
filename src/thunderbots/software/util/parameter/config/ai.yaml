Passing:
  static_field_position_quality_x_offset:
    min: 0
    max: 1
    default: 0.3
    type: "double"
    description: >-
               The offset from the sides of the field to place the rectangular
               sigmoid we use to determine what areas to pass to
  static_field_position_quality_y_offset:
    min: 0
    max: 1
    default: 0.3
    type: "double"
    description: >-
               The offset from the sides of the field to place the rectangular
               sigmoid we use to determine what areas to pass to
  static_field_position_quality_friendly_goal_distance_weight:
    min: 0
    max: 1
    default: 0.3
    type: "double"
    description: >-
        The weight that being close to the goal will have on the static
        position quality. Lower, more negative weights result in the distance
        to the goal having less of an effect.
  enemy_proximity_importance:
    min: 0
    max: 10
    default: 0.5
    type: "double"
    description: >-
               This controls how heavily we weight a robot being near the pass
               receiver when calculating enemy risk to a pass
  ideal_min_shoot_angle_degrees:
    min: -360
    max: 360
    default: 40
    type: "double"
    description: >-
        The minimum open angle formed by the two enemy goal posts and the
        pass reception position that we think will likely result in a good
        shooting opportunity. Note that we may take shots below this in some
        cases, it's more of a weight then a cutoff.
  ideal_max_rotation_to_shoot_degrees:
    min: 0
    max: 180
    default: 60
    type: "double"
    description: >-
               The maximum angle that we have to rotate after receiving a pass to
               shoot that we think would likely result in a goal. Note that we may
               try to take shots that require us to rotate more then this, it's more
               of a soft limit.
  min_pass_speed_m_per_s:
    min: 0
    max: 5
    default: 3.5
    type: "double"
    description: "The minimum pass speed (in m/s)"
  max_pass_speed_m_per_s:
    min: 0
    max: 10
    default: 5.5
    type: "double"
    description: "The maximum pass speed (in m/s)"
  min_time_offset_for_pass_seconds:
    min: 0
    max: 5
    default: 0.7
    type: "double"
    description: >-
      Minimum time into the future at which the pass should occur. This is
      to ensure we have enough time to setup a robot to actually perform
      the pass. This is in seconds.
  max_time_offset_for_pass_seconds:
    min: 0
    max: 5
    default: 4.0
    type: "double"
    description: >-
      Maximum time into the future at which the pass should occur. This gives the
      upper bound on the pass start time, relative to the current time. This is in
      seconds.
  enemy_reaction_time:
    min: 0
    max: 3.0
    default: 0.4
    type: "double"
    description: >-
      How long we think the enemy will take to recognize we're passing and start
      moving to intercept
  num_passes_to_optimize:
    min: 1
    max: 1000
    default: 15
    type: "int"
    description: "The number of passes to try to optimize at any given time"
  num_passes_to_keep_after_pruning:
    min: 0
    max: 1000
    default: 3
    type: "int"
    description: "The number of passes to keep after pruning"
  number_of_gradient_descent_steps_per_iter:
    min: 0
    max: 1000
    default: 10
    type: "int"
    description: "The number of steps of gradient descent to perform in each iteration"
  pass_equality_max_position_difference_meters:
    min: 0
    max: 4
    default: 0.05
    type: "double"
    description: >-
      The maximum allowed difference between the reciever and passer
      point of two passes for which they are considered equal
  pass_equality_max_start_time_difference_seconds:
    min: 0
    max: 3
    default: 0.1
    type: "double"
    description: "TODO: Add description as part of #149"
  pass_equality_max_speed_difference_meters_per_second:
    min: 0
    max: 4
    default: 0.3
    type: "double"
    description: "TODO: Add description as part of #149"
Navigator:
  default_avoid_dist:
    min: 0
    max: 100
    default: 50
    type: "double"
    description: "TODO: Add description as part of #149"
  collision_avoid_velocity_scale:
    min: 0
    max: 1
    default: 0.5
    type: "double"
    description: "TODO: Add description as part of #149"
  transition_speed_factor:
    min: 0
    max: 1
    default: 0.6
    type: "double"
    description: "Factor of max speed to use for transition speed calculations"
  velocity_obstacle_inflation_factor:
    min: 0
    max: 1
    default: 0.2
    type: "double"
    description: "Factor for velocity obstacle length scaling"
  robot_obstacle_inflation_factor:
    min: 0
    max: 10
    default: 1.3
    type: "double"
    description: "Factor for robot obstacle size"
  ball_obstacle_inflation_factor:
    min: 0
    max: 10
    default: 1.3
    type: "double"
    description: "Factor for ball obstacle size"
robot_expiry_buffer_milliseconds:
  min: 0
  max: 100
  default: 50
  type: "int"
  description: "TODO: Add description as part of #149"
Evaluation:
    Possession:
      possession_dist:
        min: 0.0
        max: 1.0
        default: 0.2
        type: "double"
        description: How close the ball has to be to the robot for the robot to have the ball
      passed_to_angle_tolerance:
        min: 0.0
        max: 90.0
        default: 15.0
        type: "double"
        description: "angle in degrees that the ball velocity can deviate from the axis between
                      the ball and the robot before it doesn't count as a pass"
      min_pass_speed:
        min: 0.0
        max: 10.0
        default: 1.0
        type: "double"
        description: minimum speed along the pass axis for it to count as a pass
    Indirect_Chip:
      chip_target_fraction:
        min: 0.0
        max: 100.0
        default: 5.0/10.0
        type: "double"
        description: Adjusts how far between ball and target the robot will chip
      chip_power_bounce_threshold:
        min: 0.0
        max: 5.0
        default: 7.5/10.0
        type: "double"
        description: Maximum fraction of distance between chipper and target the first bounce should be, so ball is rolling when it reaches the target
      max_chip_power:
        min: 0.0
        max: 100.0
        default: 8.0
        type: "double"
        description: Maximum power the robot can chip the ball at without malfunctions
      chip_target_area_inset:
        min: 0.0
        max: 100.0
        default: 0.3
        type: "double"
        description: Closest distance to edge of field that the robot could chip and chase to
      min_chip_tri_area:
        min: 0.0
        max: 100.0
        default: 0.5
        type: "double"
        description: Minimum area of chip target triangle
      min_chip_tri_edge_len:
        min: 0.0
        max: 100.0
        default: 0.8
        type: "double"
        description: Minimum edge length of chip target triangle
      min_chip_tri_edge_angle:
        min: 0.0
        max: 180.0
        default: 20
        type: "double"
        description: Minimum angle in degrees between chip triangle edges
      chip_cherry_power_downscale:
        min: 0.0
        max: 100.0
        default: 0.85
        type: "double"
        description: Percentage of distance to center of triangle to return as target
DefenderCreaseTactic:
  max_defender_seperation_deg:
    min: 0.0
    max: 50
    default: 13.0
    type: "double"
    description: The maximum angle the crease defenders will seperate by, in degrees.
  min_defender_seperation_deg:
    min: 0.0
    max: 50
    default: 3.0
    type: "double"
    description: The minimum angle the crease defenders will seperate by, in degrees.
  ball_dist_for_max_defender_seperation:
    min: 0.0
    max: 5
    default: 3
    type: "double"
    description: >-
      The distance between the ball and the defenders at which they will have their
      maximum seperation.
  ball_dist_for_min_defender_seperation:
    min: 0.0
    max: 5
    default: 1
    type: "double"
    description: >-
      The distance between the ball and the defenders at which they will have their
      minimum seperation.
PivotAction:
  experimental:
      type: "bool"
      default: false
      description: If toggled, then loose ball will attempt to pivot with bottom parameters
  arb_scaling:
      min: 0.0
      max: 10.0
      type: "double"
      default: 1.0
      description: How quickly to pivot
  finish_angle_threshold:
      min: 0.0
      max: 360.0
      type: "double"
      default: 5.0
      description: >-
          How much tolerance in degrees we allow for the final angle before annoucing
          pivot has finished
GoalieTactic:
  goalie_final_speed:
      min: 0.0
      max: 3.0
      default: 0.0
      type: "double"
      description: >- 
        Control the final speed of the goalie to be able to intercept shots better
  ball_speed_panic:
      min: 0.0
      max: 6.0
      default: 0.2
      type: "double"
      description: >- 
        At what speed of the ball should the goalie panic and stop the ball
  block_cone_radius:
      min: 0.0
      max: 1.0
      default: 0.1
      type: "double"
      description: >- 
          The radius to wedge the robot into the cone, defaults to robot radius
  defense_area_deflation:
      min: 0.1
      max: 0.5
      default: 0.2
      type: "double"
      description: >- 
        How much to deflate the defense area by, larger value means closer to the
        net
RobotCapabilities:
  broken_dribblers:
    default: ""
    type: "string"
    description: Comma-separated list of numbers of robots with broken dribblers
  broken_chippers:
    default: ""
    type: "string"
    description: Comma-separated list of numbers of robots with broken chippers
  broken_kickers:
    default: ""
    type: "string"
    description: Comma-separated list of numbers of robots with broken kickers
DefenseShadowEnemyTactic:
  ball_steal_speed:
    default: 0.3
    max: 1.0
    min: 0.0
    type: "double"
    description: Try to steal the passee's ball below this ball speed
ShootOrChipPlay:
  fallback_chip_target_enemy_goal_offset:
    min: 0.0
    max: 4.0
    default: 1.5
    type: double
    description: >-
      The x offset from the enemy goal for the fallback chip target, ie. where we will
      chip if any enemy approches us before we have a good shot or a robot to chip to