AI:
  Passing:
    static_field_position_quality_x_offset:
      min: 0
      max: 1
      default: 0.3
      type: "double"
      description: >-
          The offset from the sides of the field to place the rectangular
          sigmoid we use to determine what areas to pass to
    static_field_position_quality_y_offset:
      min: 0
      max: 1
      default: 0.3
      type: "double"
      description: >-
          The offset from the sides of the field to place the rectangular
          sigmoid we use to determine what areas to pass to
    static_field_position_quality_friendly_goal_distance_weight:
      min: 0
      max: 1
      default: 0.3
      type: "double"
      description: >- 
          The weight that being close to the goal will have on the static
          position quality. Lower, more negative weights result in the distance
          to the goal having less of an effect.
    enemy_proximity_importance:
      min: 0
      max: 10
      default: 0.5
      type: "double"
      description: >-
        This controls how heavily we weight a robot being near the pass
        receiver when calculating enemy risk to a pass
    ideal_min_shoot_angle_degrees:
      min: -360
      max: 360
      default: 40
      type: "double"
      description: >- 
          The minimum open angle formed by the two enemy goal posts and the
          pass reception position that we think will likely result in a good
          shooting opportunity. Note that we may take shots below this in some
          cases, it's more of a weight then a cutoff.
    ideal_max_rotation_to_shoot_degrees:
      min: 0
      max: 180
      default: 60
      type: "double"
      description: >- 
          The maximum angle that we have to rotate after receiving a pass to
          shoot that we think would likely result in a goal. Note that we may
          try to take shots that require us to rotate more then this, it's more
          of a soft limit.
    min_pass_speed_m_per_s:
      min: 0
      max: 5
      default: 2.0
      type: "double"
      description: "The minimum pass speed (in m/s)"
    max_pass_speed_m_per_s:
      min: 0
      max: 5
      default: 4.0
      type: "double"
      description: "The maximum pass speed (in m/s)"
    min_time_offset_for_pass_seconds:
      min: 0
      max: 5
      default: 0.2
      type: "double"
      description: >-
        Minimum time into the future at which the pass should occur. This is
        to ensure we have enough time to setup a robot to actually perform
        the pass. This is in seconds.
    max_time_offset_for_pass_seconds:
      min: 0
      max: 5
      default: 4.0
      type: "double"
      description: >-
        Maximum time into the future at which the pass should occur. This gives the
        upper bound on the pass start time, relative to the current time. This is in
        seconds.
    num_passes_to_optimize:
      min: 1
      max: 1000
      default: 30
      type: "int"
      description: "The number of passes to try to optimize at any given time"
    num_passes_to_keep_after_pruning:
      min: 0
      max: 1000
      default: 5
      type: "int"
      description: "The number of passes to keep after pruning"
    number_of_gradient_descent_steps_per_iter:
      min: 0
      max: 1000
      default: 10
      type: "int"
      description: "The number of steps of gradient descent to perform in each iteration"
    pass_equality_max_position_difference_meters:
      min: 0
      max: 4
      default: 0.05
      type: "double"
      description: >- 
        The maximum allowed difference between the reciever and passer 
        point of two passes for which they are considered equal
    pass_equality_max_start_time_difference_seconds:
      min: 0
      max: 3
      default: 0.1
      type: "double"
      description: "TODO: Add description as part of #149"
    pass_equality_max_speed_difference_meters_per_second:
      min: 0
      max: 4
      default: 0.3
      type: "double"
      description: "TODO: Add description as part of #149"
Navigator:
  default_avoid_dist:
    min: 0
    max: 100
    default: 50
    type: "double"
    description: "TODO: Add description as part of #149"
  collision_avoid_velocity_scale:
    min: 0
    max: 1
    default: 0.5
    type: "double"
    description: "TODO: Add description as part of #149"
robot_expiry_buffer_milliseconds:
  min: 0
  max: 100
  default: 50
  type: "int"
  description: "TODO: Add description as part of #149"
Evaluation:
    Indirect_Chip:
      chip_target_fraction:
        min: 0.0
        max: 100.0
        default: 5.0/10.0
        type: "double"
        description: Adjusts how far between ball and target the robot will chip
      chip_power_bounce_threshold:
        min: 0.0
        max: 5.0
        default: 7.5/10.0
        type: "double"
        description: Maximum fraction of distance between chipper and target the first bounce should be, so ball is rolling when it reaches the target
      max_chip_power:
        min: 0.0
        max: 100.0
        default: 8.0
        type: "double"
        description: Maximum power the robot can chip the ball at without malfunctions
      chip_target_area_inset:
        min: 0.0
        max: 100.0
        default: 0.3
        type: "double"
        description: Closest distance to edge of field that the robot could chip and chase to
      min_chip_tri_area:
        min: 0.0
        max: 100.0
        default: 0.5
        type: "double"
        description: Minimum area of chip target triangle
      min_chip_tri_edge_len:
        min: 0.0
        max: 100.0
        default: 0.8
        type: "double"
        description: Minimum edge length of chip target triangle
      min_chip_tri_edge_angle:
        min: 0.0
        max: 180.0
        default: 20
        type: "double"
        description: Minimum angle in degrees between chip triangle edges
      chip_cherry_power_downscale:
        min: 0.0
        max: 100.0
        default: 0.85
        type: "double"
        description: Percentage of distance to center of triangle to return as target
