
/**
 *  !! WARNING !!
 *
 *  THIS FILE IS AUTOGENERATED, ANY CHANGES MADE WILL BE LOST
 *
 *  !! WARNING !!
 */

#include "util/parameter/dynamic_parameters.h"
namespace Util::DynamicParameters
{
    std::vector<std::string> cfg_strs{"ai_control", "evaluation", "ai",
                                      "vision_and_filters", "xbox_controller"};
    namespace AI
    {
        Parameter<bool> run_ai("run_ai", "ai_control", false);

        Parameter<bool> override_ai_play("override_ai_play", "ai_control", false);

        Parameter<std::string> current_ai_play("current_ai_play", "ai_control",
                                               "Example Play");

        namespace refbox
        {
            Parameter<bool> override_refbox_play("override_refbox_play", "ai_control",
                                                 false);

            Parameter<std::string> current_refbox_play("current_refbox_play",
                                                       "ai_control", "Halt");

            Parameter<bool> override_refbox_defending_side(
                "override_refbox_defending_side", "ai_control", false);

            Parameter<bool> defending_positive_side("defending_positive_side",
                                                    "ai_control", false);

            Parameter<bool> override_refbox_friendly_team_color(
                "override_refbox_friendly_team_color", "ai_control", false);

            Parameter<bool> friendly_color_yellow("friendly_color_yellow", "ai_control",
                                                  false);

        }  // namespace refbox
    }      // namespace AI
    namespace Evaluation
    {
        namespace Indirect_Chip
        {
            Parameter<double> chip_target_fraction("chip_target_fraction", "evaluation",
                                                   5.0 / 10.0);

            Parameter<double> chip_power_bounce_threshold("chip_power_bounce_threshold",
                                                          "evaluation", 7.5 / 10.0);

            Parameter<double> max_chip_power("max_chip_power", "evaluation", 8.0);

            Parameter<double> chip_target_area_inset("chip_target_area_inset",
                                                     "evaluation", 0.3);

            Parameter<double> min_chip_tri_area("min_chip_tri_area", "evaluation", 0.5);

            Parameter<double> min_chip_tri_edge_len("min_chip_tri_edge_len", "evaluation",
                                                    0.8);

            Parameter<double> min_chip_tri_edge_angle("min_chip_tri_edge_angle",
                                                      "evaluation", 20);

            Parameter<double> chip_cherry_power_downscale("chip_cherry_power_downscale",
                                                          "evaluation", 0.85);

        }  // namespace Indirect_Chip
    }      // namespace Evaluation
    namespace AI
    {
        namespace Passing
        {
            Parameter<double> static_field_position_quality_x_offset(
                "static_field_position_quality_x_offset", "ai", 0.3);

            Parameter<double> static_field_position_quality_y_offset(
                "static_field_position_quality_y_offset", "ai", 0.3);

            Parameter<double> static_field_position_quality_friendly_goal_distance_weight(
                "static_field_position_quality_friendly_goal_distance_weight", "ai", 0.3);

            Parameter<double> enemy_proximity_importance("enemy_proximity_importance",
                                                         "ai", 0.5);

            Parameter<double> ideal_min_shoot_angle_degrees(
                "ideal_min_shoot_angle_degrees", "ai", 40);

            Parameter<double> ideal_min_rotation_to_shoot_degrees(
                "ideal_min_rotation_to_shoot_degrees", "ai", 5);

            Parameter<double> min_pass_speed_m_per_s("min_pass_speed_m_per_s", "ai", 2.0);

            Parameter<double> max_pass_speed_m_per_s("max_pass_speed_m_per_s", "ai", 4.0);

            Parameter<double> min_time_offset_for_pass_seconds(
                "min_time_offset_for_pass_seconds", "ai", 0.3);

            Parameter<int32_t> num_passes_to_optimize("num_passes_to_optimize", "ai", 50);

            Parameter<int32_t> num_passes_to_keep_after_pruning(
                "num_passes_to_keep_after_pruning", "ai", 10);

            Parameter<int32_t> number_of_gradient_descent_steps_per_iter(
                "number_of_gradient_descent_steps_per_iter", "ai", 20);

            Parameter<double> pass_equality_max_position_difference_meters(
                "pass_equality_max_position_difference_meters", "ai", 0.1);

            Parameter<double> pass_equality_max_start_time_difference_seconds(
                "pass_equality_max_start_time_difference_seconds", "ai", 0.5);

            Parameter<double> pass_equality_max_speed_difference_meters_per_second(
                "pass_equality_max_speed_difference_meters_per_second", "ai", 0.3);

        }  // namespace Passing
    }      // namespace AI
    namespace Navigator
    {
        Parameter<double> default_avoid_dist("default_avoid_dist", "ai", 50);

        Parameter<double> collision_avoid_velocity_scale("collision_avoid_velocity_scale",
                                                         "ai", 0.5);

    }  // namespace Navigator
    Parameter<int32_t> robot_expiry_buffer_milliseconds(
        "robot_expiry_buffer_milliseconds", "ai", 50);

    namespace cameras
    {
        Parameter<bool> ignore_camera_0("ignore_camera_0", "vision_and_filters", false);

        Parameter<bool> ignore_camera_1("ignore_camera_1", "vision_and_filters", false);

        Parameter<bool> ignore_camera_2("ignore_camera_2", "vision_and_filters", false);

        Parameter<bool> ignore_camera_3("ignore_camera_3", "vision_and_filters", false);

    }  // namespace cameras
    namespace XBoxControllerDemo
    {
        Parameter<int32_t> robot_id("robot_id", "xbox_controller", 0);

        Parameter<double> kick_speed_meters_per_second("kick_speed_meters_per_second",
                                                       "xbox_controller", 4.0);

        Parameter<double> chip_distance_meters("chip_distance_meters", "xbox_controller",
                                               1.0);

        Parameter<int32_t> dribbler_rpm("dribbler_rpm", "xbox_controller", 1000);

        Parameter<double> linear_sensitivity("linear_sensitivity", "xbox_controller",
                                             1.0);

        Parameter<double> angular_sensitivity("angular_sensitivity", "xbox_controller",
                                              1.0);

    }  // namespace XBoxControllerDemo
}  // namespace Util::DynamicParameters
