# This project name must match the name of the package defined in package.xml

cmake_minimum_required(VERSION 3.8.2)
project(thunderbots)
cmake_minimum_required(VERSION 3.8.2)

# Build in "Release" (with lots of compiler optimizations) by default
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
endif()

# For external editor code completion (Visual Studio Code, Vim, etc.)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# Use PkgConfig to find some packages using pkg_check_modules
find_package(PkgConfig REQUIRED)
include(FindPkgConfig)

####################
## Custom Options ##
####################
option(ENABLE_COVERAGE "Enable code profiling and coverage report analysis" OFF)

####################
## Compiler Flags ##
####################
### Set cmake standard to c++ 17 ###
set(CMAKE_CXX_STANDARD 17)

### Flags to add for debug/release/coverage ###
if(${ENABLE_COVERAGE})
    message(STATUS "Building in Debug with profiling enabled")
    # Add the required flags to build with profiling enabled
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-generate -fprofile-arcs -ftest-coverage")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs")
elseif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    # Build in release by default if nothing was specified on the command line
    message(STATUS "Building in Release")
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
endif()

### Set compiler flags for all code ###
add_definitions(-Wno-deprecated) # Don't warn about including "old" headers
add_definitions(-fno-common) # Do not allow multiple definitions of the same global variable
add_definitions(-Werror) # Treat warnings as errors, so they don't build up



### Set compiler flags only for cpp code. These flags do not work for C files ###
# Warn if parent classes do not define a virtual destructor
# See https://www.quantstart.com/articles/C-Virtual-Destructors-How-to-Avoid-Memory-Leaks
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wnon-virtual-dtor")

#############################################
## Find and include packages and libraries ##
#############################################

# Find the g3log library, the logger we use for our AI
# See: https://github.com/KjellKod/g3log
SET(G3_LIBRARY_PATH "/usr/local/include")
message("g3log lib path: ${G3_LIBRARY_PATH}")
find_library(G3LOG g3logger PATHS ${G3_LIBRARY_PATH})
if(NOT G3LOG OR NOT EXISTS "${G3LOG}")
    message(FATAL_ERROR "G3LOG library not found")
endif()
message("g3log path: ${G3LOG}")

# Find Eigen
find_package (Eigen3 3.3 REQUIRED NO_MODULE)

# Find boost components
find_package(Boost REQUIRED COMPONENTS
        coroutine
        )

# Find libusb
pkg_search_module("LIBUSB_1" REQUIRED "libusb-1.0")
include_directories(SYSTEM "${LIBUSB_1_INCLUDE_DIRS}")
link_directories("${LIBUSB_1_LIBRARY_DIRS}")
add_definitions("${LIBUSB_1_DEFINITIONS}")


## Find catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
        roscpp
        std_msgs
        message_generation
        thunderbots_msgs
        dynamic_reconfigure
        )

# Get macro for generating dynamic reconfigure files for multiple languages
include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/generate_cfgs_from_yaml.cmake")
generate_cfgs_from_yaml()

# Specify the configuration file for dynamic_reconfigure pkg
generate_dynamic_reconfigure_options(
    ${AUTOGENERATED_CFGS}
    )

# Setup ROS
catkin_package(
        INCLUDE_DIRS
        LIBRARIES thunderbots
        CATKIN_DEPENDS roscpp std_msgs dynamic_reconfigure
        DEPENDS message_runtime
        )

#########################
## Include Directories ##
#########################

# Specify additional locations of header files
include_directories(SYSTEM
    ${catkin_INCLUDE_DIRS}
    )

include_directories(
        ${catkin_INCLUDE_DIRS}
        ${PROTOBUF_INCLUDE_DIRS}
        ${Boost_INCLUDE_DIRS}
        ${CMAKE_CURRENT_SOURCE_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}/..
        )

###############
## Libraries ##
###############

# TODO: Should plural libraries be plurally named?

# Geom
file(GLOB_RECURSE TBOTS_GEOM_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/geom/*.cpp
        )
add_library(tbots_geom STATIC
    ${TBOTS_GEOM_LIB_SRC}
    )
add_dependencies(tbots_geom ${catkin_EXPORTED_TARGETS})
target_link_libraries(tbots_geom
    ${G3LOG}
    )

# Time
file(GLOB_RECURSE TBOTS_TIME_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/util/time/*.cpp
        )
add_library(tbots_time STATIC 
    ${TBOTS_TIME_LIB_SRC}
    )
target_link_libraries(tbots_time
    ${G3LOG}
    )
add_dependencies(tbots_time ${catkin_EXPORTED_TARGETS})

# Parameter
file(GLOB_RECURSE TBOTS_PARAMETER_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/util/parameter/*.cpp
        )
add_library(tbots_parameter STATIC 
    ${TBOTS_PARAMETER_LIB_SRC}
    )
target_link_libraries(tbots_parameter
    ${catkin_LIBRARIES}
    )
add_dependencies(tbots_parameter ${catkin_EXPORTED_TARGETS})

# Primitive 
file(GLOB_RECURSE TBOTS_PRIMITIVE_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/primitive/*.cpp
        )
add_library(tbots_primitive STATIC 
    ${TBOTS_PRIMITIVE_LIB_SRC}
    )
target_link_libraries(tbots_primitive
    ${G3LOG}
    )
add_dependencies(tbots_primitive ${catkin_EXPORTED_TARGETS})

# Intent
file(GLOB TBOTS_INTENT_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/intent/*.cpp
        )
add_library(tbots_intent STATIC
    ${TBOTS_INTENT_LIB_SRC}
    )
target_link_libraries(tbots_intent
    tbots_primitive
    )
add_dependencies(tbots_intent ${catkin_EXPORTED_TARGETS})

# Action
file(GLOB TBOTS_ACTION_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/action/*.cpp
        )
add_library(tbots_action STATIC
    ${TBOTS_ACTION_LIB_SRC}
    )
target_link_libraries(tbots_action
    ${Boost_LIBRARIES}
    tbots_intent
    )
add_dependencies(tbots_action ${catkin_EXPORTED_TARGETS})


# Refbox Utils
add_library(tbots_refbox_util STATIC
        util/refbox_constants.cpp
        )
add_dependencies(tbots_refbox_util ${catkin_EXPORTED_TARGETS})

# World
file(GLOB_RECURSE TBOTS_WORLD_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/world/*.cpp
        )
add_library(tbots_world STATIC 
    ${TBOTS_WORLD_LIB_SRC}
    )
target_link_libraries(tbots_world
    ${G3LOG}
    tbots_time
    tbots_parameter
    tbots_refbox_util
    )
add_dependencies(tbots_world ${catkin_EXPORTED_TARGETS})

# Canvas Messenger 
file(GLOB_RECURSE TBOTS_CANVAS_MESSENGER_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/util/canvas_messenger/*.cpp
        )
add_library(tbots_canvas_messenger STATIC
    ${TBOTS_CANVAS_MESSENGER_LIB_SRC}
    )
target_link_libraries(tbots_canvas_messenger
    ${catkin_LIBRARIES}
    ${G3LOG}
    )
add_dependencies(tbots_canvas_messenger ${catkin_EXPORTED_TARGETS})

# ROS Message Utils
add_library(tbots_ros_msg_util STATIC
        util/ros_messages.cpp
        )
add_dependencies(tbots_ros_msg_util ${catkin_EXPORTED_TARGETS})
target_link_libraries(tbots_ros_msg_util
    tbots_world
    )

# Math Utils
add_library(tbots_math STATIC
        util/math_functions.cpp
        )

# Evaluation
file(GLOB TBOTS_EVALUATION_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/evaluation/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/evaluation/*.cpp
        )
add_library(tbots_evaluation STATIC
    ${TBOTS_EVALUATION_LIB_SRC}
    )
target_link_libraries(tbots_evaluation
    tbots_geom
    tbots_parameter
    tbots_time
    tbots_world
    )

# Passing
file(GLOB_RECURSE TBOTS_PASSING_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/passing/*.cpp
        )
add_library(tbots_passing STATIC
    ${TBOTS_PASSING_LIB_SRC}
    )
target_link_libraries(tbots_passing
    tbots_evaluation
    tbots_geom
    tbots_canvas_messenger
    tbots_math
    tbots_world
    )

# Tactic
file(GLOB TBOTS_TACTIC_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/tactic/*.cpp
        )
add_library(tbots_tactic STATIC 
    ${TBOTS_TACTIC_LIB_SRC}
    )
target_link_libraries(tbots_tactic
    ${Boost_LIBRARIES}
    tbots_action
    tbots_geom
    tbots_passing
    tbots_evaluation
    )
add_dependencies(tbots_tactic ${catkin_EXPORTED_TARGETS})

# Play
file(GLOB TBOTS_PLAYS_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/play/*.cpp
        )
add_library(tbots_play STATIC 
    ${TBOTS_PLAYS_LIB_SRC}
    )
target_link_libraries(tbots_play
    ${Boost_LIBRARIES}
    tbots_tactic
    tbots_evaluation
    tbots_passing
    )
add_dependencies(tbots_play ${catkin_EXPORTED_TARGETS})

# Navigator
file(GLOB_RECURSE TBOTS_NAVIGATOR_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/navigator/*.cpp
        )
add_library(tbots_navigator STATIC 
    ${TBOTS_NAVIGATOR_LIB_SRC}
    )
target_link_libraries(tbots_navigator
    tbots_geom
    tbots_math
    tbots_world
    tbots_canvas_messenger
    )
add_dependencies(tbots_navigator ${catkin_EXPORTED_TARGETS})

# Test Utils
add_library(tbots_test_util STATIC
        test/test_util/test_util.cpp
        )
target_link_libraries(tbots_test_util
    tbots_time
    tbots_world
    )


# Proto
## Call our CMake file to include and build protobuf
include("${CMAKE_CURRENT_SOURCE_DIR}/proto/build_proto.cmake")
## Find the generated files
file(GLOB TBOTS_PROTO_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/proto/*.pb.cc")
add_library(tbots_proto STATIC
    ${TBOTS_PROTO_SRCS}
    )
target_link_libraries(tbots_proto 
    ${PROTOBUF_LIBRARIES}
    )

# Shared
file(GLOB TBOTS_SHARED_LIB_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/../shared/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/../shared/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/../shared/*.h
        )
add_library(tbots_shared STATIC 
    ${TBOTS_SHARED_LIB_SRC}
    )

#################
## Executables ##
#################

file(GLOB_RECURSE NETWORK_INPUT_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/network_input/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/network_input/*.h
        )
add_executable (network_input
        ${NETWORK_INPUT_SRC}
        )
# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
add_dependencies(network_input ${catkin_EXPORTED_TARGETS})
target_link_libraries(network_input
        ${catkin_LIBRARIES}
        ${G3LOG}
        Eigen3::Eigen
        tbots_geom
        tbots_world
        tbots_proto
        tbots_parameter
        tbots_ros_msg_util
        tbots_math
        )

file(GLOB AI_LOGIC_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/*.cpp
        # We include all the plays here so that that the static variables in 
        # the .cpp files that auto-register plays with the PlayFactory. This 
        # addresses the issue explained here:
        # https://www.bfilipek.com/2018/02/static-vars-static-lib.html
        ${CMAKE_CURRENT_SOURCE_DIR}/ai/hl/stp/play/*.cpp
        )
add_executable (ai_logic
        ${AI_LOGIC_SRC}
        )
# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
add_dependencies(ai_logic ${catkin_EXPORTED_TARGETS})
target_link_libraries(ai_logic 
        ${catkin_LIBRARIES}
        ${Boost_LIBRARIES}
        ${G3LOG}
        tbots_geom
        tbots_world
        tbots_proto
        tbots_shared
        tbots_evaluation
        tbots_action
        tbots_play
        tbots_tactic
        tbots_intent
        tbots_navigator
        tbots_passing
        tbots_primitive
        tbots_parameter
        tbots_ros_msg_util
        tbots_canvas_messenger
        )

file(GLOB GRSIM_COMMUNICATION_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/grsim_communication/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/grsim_communication/*.h
        )
add_executable (grsim_communication
        ${GRSIM_COMMUNICATION_SRC}
        )

# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
add_dependencies(grsim_communication ${catkin_EXPORTED_TARGETS})
target_link_libraries(grsim_communication ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_primitive
        tbots_world
        tbots_geom
        tbots_proto
        tbots_parameter
        tbots_ros_msg_util
        )

file(GLOB_RECURSE RADIO_COMMUNICATION_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/radio_communication/*.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/radio_communication/*.h
        )
add_executable (radio_communication
        ${RADIO_COMMUNICATION_SRC}
        )
# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
add_dependencies(radio_communication ${catkin_EXPORTED_TARGETS})
target_link_libraries(radio_communication
        ${catkin_LIBRARIES}
        ${G3LOG}
        ${LIBUSB_1_LIBRARIES}
        tbots_shared
        tbots_primitive
        tbots_world
        tbots_time
        tbots_parameter
        tbots_ros_msg_util
        )

file(GLOB DYNAMIC_RECONFIGURE_SERVER_HOST_NODE_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/dynamic_reconfigure_manager/*.cpp
        )
add_executable (parameters
        ${DYNAMIC_RECONFIGURE_SERVER_HOST_NODE_SRC}
        )
# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
# We also make sure we've generated parameters before building this target
add_dependencies(parameters 
    thunderbots_gencfg 
    ${catkin_EXPORTED_TARGETS}
    )
target_link_libraries(parameters  
        ${catkin_LIBRARIES}
        tbots_proto
        tbots_shared
        tbots_parameter
        )

file(GLOB XBOX_CONTROLLER_MAPPING_SRC LIST_DIRECTORIES false CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/xbox_controller_mapping/*.cpp
        )
add_executable (xbox_controller_mapping
        ${XBOX_CONTROLLER_MAPPING_SRC}
        )
# Depend on exported targets (other packages) so that the messages in our thunderbots_msgs package are built first.
# This way the message headers are always generated before they are used in compilation here.
add_dependencies(xbox_controller_mapping ${catkin_EXPORTED_TARGETS})
target_link_libraries(xbox_controller_mapping
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_primitive
        tbots_world
        tbots_shared
        tbots_time
        tbots_parameter
        tbots_ros_msg_util
        )


#############
## Testing ##
#############

###### IMPORTANT #####

## DO NOT USE GLOBBING FOR TEST EXECUTABLES. SPECIFY EACH SOURCE FILE. ##
# This is to make sure we know exactly what files/interfaces are being tested and that we are not accidentally
# picking up other files that may affect test behaviour. Unit tests should not need too many files to be specified
# and we want to make sure the minimum set of files required for the test are being used.

## Why We Have Tests Grouped ##
# When you build a test executable (or any executable) with cmake, it does not
# save any `.o` files it might have already built for other executables. That
# means if I require `move_primitive.cpp` for two test executables, CMake will
# build it _twice_. This has lead to a heck of a lot of build duplication in our
# system. See this PR for the original change in this direction:
# https://github.com/UBC-Thunderbots/Software/pull/386

##### Unit Tests #####

## Add gtest based cpp test target and link libraries
if (CATKIN_ENABLE_TESTING)
    #gtest
    catkin_add_gtest(geom_angle_test
            test/geom/angle.cpp
            geom/angle.h
            )
    target_link_libraries(geom_angle_test ${catkin_LIBRARIES})

    catkin_add_gtest(geom_point_test
            test/geom/point.cpp
            geom/point.h
            )
    target_link_libraries(geom_point_test ${catkin_LIBRARIES})

    catkin_add_gtest(geom_util_test
            test/geom/util.cpp
            )
    target_link_libraries(geom_util_test
            ${catkin_LIBRARIES}
            tbots_geom
            )

    catkin_add_gtest(nav_util_test
            test/ai/navigator/util.cpp
            ai/navigator/util.cpp
            ai/navigator/util.h
            ai/primitive/move_primitive.h
            ai/primitive/move_primitive.cpp
            ai/primitive/primitive.cpp
            ai/primitive/primitive.h
            geom/point.h)
    target_link_libraries(nav_util_test ${catkin_LIBRARIES})

    catkin_add_gtest(shared_util_test
            ../shared/test/util.cpp
            ../shared/util.c
            ../shared/util.h)
    target_link_libraries(shared_util_test ${catkin_LIBRARIES})

    catkin_add_gtest(ros_message_util_test
            test/util/ros_messages.cpp
            )
    target_link_libraries(ros_message_util_test 
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_world
            tbots_geom
            tbots_ros_msg_util
            )

    catkin_add_gtest(world_test
            test/ai/world/ball.cpp
            test/ai/world/field.cpp
            test/ai/world/game_state.cpp
            test/ai/world/main.cpp
            test/ai/world/robot.cpp
            test/ai/world/team.cpp
            test/ai/world/world.cpp
            test/ai/world/robot_capabilities.cpp
            )
    target_link_libraries(world_test 
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_world
            tbots_test_util
            )


    catkin_add_gtest(test_util_test
            test/test_util/test_util_test.cpp
            )

    target_link_libraries(test_util_test 
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_world
            tbots_test_util
            )

    catkin_add_gtest(grsim_communication_test
            grsim_communication/grsim_backend.cpp
            grsim_communication/grsim_command_primitive_visitor.cpp
            grsim_communication/motion_controller.cpp
            test/grsim_communication/dribble_primitive.cpp
            test/grsim_communication/grsim_backend.cpp
            test/grsim_communication/catch_primitive.cpp
            test/grsim_communication/pivot_primitive.cpp
            test/grsim_communication/movespin_primitive.cpp
            test/grsim_communication/main.cpp
            test/grsim_communication/motion_controller.cpp
            )
    target_link_libraries(grsim_communication_test 
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_proto
            tbots_geom
            tbots_world
            tbots_primitive
            tbots_test_util
            )

    catkin_add_gtest(primitive_test
            test/ai/primitive/catch_primitive.cpp
            test/ai/primitive/chip_primitive.cpp
            test/ai/primitive/direct_velocity_primitive.cpp
            test/ai/primitive/direct_wheels_primitive.cpp
            test/ai/primitive/dribble_primitive.cpp
            test/ai/primitive/kick_primitive.cpp
            test/ai/primitive/move_primitive.cpp
            test/ai/primitive/movespin_primitive.cpp
            test/ai/primitive/pivot_primitive.cpp
            test/ai/primitive/primitive.cpp
            test/ai/primitive/primitive_factory.cpp
            test/ai/primitive/stop_primitive.cpp
            test/ai/primitive/main.cpp
            )

    target_link_libraries(primitive_test 
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_primitive
        )


    catkin_add_gtest(mrf_primitive_visitor_test
            test/radio_communication/visitor/mrf_primitive_visitor.cpp
            radio_communication/visitor/mrf_primitive_visitor.cpp
            )
    target_link_libraries(mrf_primitive_visitor_test 
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_primitive
        )

    catkin_add_gtest(time_test
            test/util/time/duration.cpp
            test/util/time/main.cpp
            test/util/time/timestamp.cpp
            )
    target_link_libraries(time_test
        ${catkin_LIBRARIES}
        tbots_time
        )

    catkin_add_gtest(shared_evaluation_test
            ai/world/robot.cpp
            ai/evaluation/pass.cpp
            test/ai/evaluation/pass.cpp
            test/ai/evaluation/main.cpp
            )
    target_link_libraries(shared_evaluation_test 
        ${catkin_LIBRARIES}
        tbots_world
        )

    catkin_add_gtest(ai_evaluation_test
            test/ai/hl/stp/evaluation/indirect_chip.cpp
            test/ai/hl/stp/evaluation/calc_best_shot.cpp
            test/ai/hl/stp/evaluation/ball.cpp
            test/ai/hl/stp/evaluation/possession.cpp
            test/ai/hl/stp/evaluation/enemy_threat.cpp
            test/ai/hl/stp/evaluation/deflect_off_enemy_target.cpp
            test/ai/hl/stp/evaluation/main.cpp
            test/ai/hl/stp/evaluation/intercept.cpp
            test/ai/hl/stp/evaluation/robot.cpp
            test/ai/hl/stp/evaluation/team.cpp
            )
    target_link_libraries(ai_evaluation_test 
        ${G3LOG}
        tbots_evaluation
        tbots_world
        tbots_geom
        tbots_test_util
        )

    catkin_add_gtest(action_test
            test/ai/hl/stp/action/main.cpp
            test/ai/hl/stp/test_actions/move_test_action.cpp
            test/ai/hl/stp/action/action.cpp
            test/ai/hl/stp/action/chip_action.cpp
            test/ai/hl/stp/action/dribble_action.cpp
            test/ai/hl/stp/action/kick_action.cpp
            test/ai/hl/stp/action/move_action.cpp
            test/ai/hl/stp/action/movespin_action.cpp
            test/ai/hl/stp/action/pivot_action.cpp
            test/ai/hl/stp/action/stop_action.cpp
            )
    target_link_libraries(action_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            tbots_world
            tbots_action
            tbots_intent
            tbots_geom
            tbots_primitive
            )

    catkin_add_gtest(tactic_test
            test/ai/hl/stp/tactic/block_shot_path_tactic.cpp
            test/ai/hl/stp/tactic/cherry_pick_tactic.cpp
            test/ai/hl/stp/tactic/main.cpp
            test/ai/hl/stp/tactic/move_tactic.cpp
            test/ai/hl/stp/tactic/passer_tactic.cpp
            test/ai/hl/stp/tactic/receiver_tactic.cpp
            test/ai/hl/stp/tactic/stop_tactic.cpp
            test/ai/hl/stp/tactic/shoot_goal_tactic.cpp
            test/ai/hl/stp/tactic/tactic.cpp
            test/ai/hl/stp/test_tactics/move_test_tactic.cpp
            )
    target_link_libraries(tactic_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            tbots_tactic
            tbots_world
            tbots_geom
            tbots_primitive
            tbots_passing
            tbots_intent
            tbots_tactic
            tbots_action
            tbots_evaluation
            tbots_test_util
            )

    catkin_add_gtest(play_test
            test/ai/hl/stp/play/example_play.cpp
            test/ai/hl/stp/play/halt_play.cpp
            test/ai/hl/stp/play/main.cpp
            test/ai/hl/stp/play/play_factory.cpp
            test/ai/hl/stp/test_plays/move_test_play.cpp
            test/ai/hl/stp/test_plays/halt_test_play.cpp
            test/ai/hl/stp/test_tactics/move_test_tactic.cpp
            test/ai/hl/stp/test_tactics/stop_test_tactic.cpp
            )
    target_link_libraries(play_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            tbots_tactic
            tbots_world
            tbots_geom
            tbots_primitive
            tbots_passing
            tbots_intent
            tbots_tactic
            tbots_action
            tbots_evaluation
            tbots_play
            tbots_test_util
            )

    catkin_add_gtest(stp_test
            ai/hl/stp/stp.cpp
            test/ai/hl/stp/test_tactics/move_test_tactic.cpp
            test/ai/hl/stp/test_tactics/stop_test_tactic.cpp
            test/ai/hl/stp/test_plays/move_test_play.cpp
            test/ai/hl/stp/test_plays/halt_test_play.cpp
            ai/hl/stp/play/play.cpp
            ai/hl/stp/play/play_factory.cpp
            test/ai/hl/stp/main.cpp
            test/ai/hl/stp/stp.cpp
            test/ai/hl/stp/stp_tactic_assignment.cpp
            )
    target_link_libraries(stp_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            tbots_tactic
            tbots_world
            tbots_geom
            tbots_primitive
            tbots_passing
            tbots_intent
            tbots_tactic
            tbots_action
            tbots_evaluation
            tbots_navigator
            tbots_test_util
            )

    catkin_add_gtest(intent_test
            test/ai/intent/catch_intent.cpp
            test/ai/intent/chip_intent.cpp
            test/ai/intent/direct_velocity_intent.cpp
            test/ai/intent/direct_wheels_intent.cpp
            test/ai/intent/dribble_intent.cpp
            test/ai/intent/intent.cpp
            test/ai/intent/kick_intent.cpp
            test/ai/intent/main.cpp
            test/ai/intent/move_intent.cpp
            test/ai/intent/movespin_intent.cpp
            test/ai/intent/pivot_intent.cpp
            test/ai/intent/stop_intent.cpp
            )
    target_link_libraries(intent_test
            ${G3LOG}
            ${catkin_LIBRARIES}
            tbots_primitive
            tbots_intent
            )

    catkin_add_gtest(passing_test
            test/ai/passing/evaluation.cpp
            test/ai/passing/main.cpp
            test/ai/passing/pass.cpp
            # TODO: (Issue #655) un-comment this and fix the flaky tests in it
            # test/ai/passing/pass_generator.cpp
            )
    target_link_libraries(passing_test 
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_passing
        tbots_test_util
        )

    catkin_add_gtest(gradient_descent_optimizer_test
            test/util/gradient_descent_optimizer.cpp
            )
    target_link_libraries(gradient_descent_optimizer_test ${catkin_LIBRARIES})

    catkin_add_gtest(math_functions_test
            test/util/math_functions.cpp
            util/math_functions.cpp
            )
    target_link_libraries(math_functions_test ${catkin_LIBRARIES})

    catkin_add_gtest(evaluation_detect_threat_test
            test/ai/hl/stp/evaluation/detect_threat.cpp
            )
    target_link_libraries(evaluation_detect_threat_test 
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_geom
        tbots_world
        tbots_evaluation
        tbots_test_util
        )

    catkin_add_gtest(navigator_test
            test/ai/navigator/main.cpp
            test/ai/navigator/placeholder_navigator/placeholder_navigator.cpp
            test/ai/navigator/obstacle/obstacle.cpp
            test/ai/navigator/trespass/trespass.cpp
            test/ai/navigator/path_planner/straight_line_path_planner.cpp
            test/ai/navigator/path_planner/theta_star_path_planner.cpp
            test/ai/navigator/path_planning_navigator/path_planning_navigator.cpp
            )
    target_link_libraries(navigator_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_navigator
            tbots_shared
            tbots_geom
            tbots_world
            tbots_intent
            tbots_primitive
            tbots_test_util
            )

    catkin_add_gtest(polygon_test
            test/geom/polygon.cpp
            geom/polygon.cpp
            geom/util.cpp)
    target_link_libraries(polygon_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            )

    catkin_add_gtest(robot_filter_test
            test/network_input/filter/robot_filter.cpp
            test/network_input/filter/main.cpp
            network_input/filter/robot_filter.cpp
            )
    target_link_libraries(robot_filter_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            tbots_world
            )

    catkin_add_gtest(game_state_play_selection_test
            ai/ai.cpp
            ai/hl/stp/stp.cpp
            test/ai/game_state_play_selection.cpp
            test/ai/hl/stp/test_plays/halt_test_play.cpp
            test/ai/hl/stp/test_plays/move_test_play.cpp
            test/ai/hl/stp/test_tactics/move_test_tactic.cpp
            test/ai/hl/stp/test_tactics/stop_test_tactic.cpp
            )
    target_link_libraries(game_state_play_selection_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            ${Threads_LIBRARIES}
            tbots_geom
            tbots_world
            tbots_navigator
            tbots_primitive
            tbots_intent
            tbots_action
            tbots_play
            tbots_tactic
            tbots_test_util
            )

    catkin_add_gtest(stp_refbox_game_state_play_selection
            ai/ai.cpp
            ai/hl/stp/stp.cpp
            test/ai/hl/stp/stp_refbox_game_state_play_selection.cpp
            ${TBOTS_PLAYS_LIB_SRC}
            )
    target_link_libraries(stp_refbox_game_state_play_selection
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES}
            tbots_world
            tbots_geom
            tbots_primitive
            tbots_navigator
            tbots_intent
            tbots_tactic
            tbots_action
            tbots_play
            tbots_test_util
            )

    catkin_add_gtest(network_input_test
            test/network_input/filter/ball_filter.cpp
            test/network_input/main.cpp
            network_input/filter/ball_filter.cpp
            )
    target_link_libraries(network_input_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            Eigen3::Eigen
            tbots_geom
            tbots_world
            tbots_test_util
            tbots_math
            )

    catkin_add_gtest(ai_util_test
                    test/ai/test_util.cpp)

    target_link_libraries(ai_util_test
            ${catkin_LIBRARIES}
            ${G3LOG}
            ${Boost_LIBRARIES})

endif()

##### ROSTests / Integration Tests #####

if (CATKIN_ENABLE_TESTING)
    find_package(rostest REQUIRED)

    # The test node that verifies the logger is working correctly
    add_rostest_gtest(logger_test test/util/logger_test.test
            test/util/logger_test.cpp
            )
    target_link_libraries(logger_test 
        ${catkin_LIBRARIES}
        ${G3LOG}
        tbots_time
        )

    # The test node that verifies the rostest utils are working correctly
    add_rostest_gtest(rostest_util_test 
        test/test_util/rostest_util_test.test
        test/test_util/rostest_util_test.cpp
        )
    target_link_libraries(rostest_util_test 
        ${catkin_LIBRARIES}
        tbots_time
        )

    # The test node that verifies the dynamic_parameters are working
    add_rostest_gtest(dynamic_parameters_test test/util/rostest_dynamic_parameters.test
            test/util/test_dynamic_parameters.cpp
            )
    target_link_libraries(dynamic_parameters_test 
        ${catkin_LIBRARIES}
        tbots_parameter
        )

    # The test node that verifies the dynamic_parameters exist in the parameter server
    add_rostest_gtest(check_parameter_existance_test 
        test/util/rostest_parameter_exists.test
        test/util/test_parameter_exists.cpp
        )
    target_link_libraries(check_parameter_existance_test 
        ${catkin_LIBRARIES}
        tbots_parameter
        )

endif()
