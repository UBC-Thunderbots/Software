#!/usr/bin/env python
import roslib
PACKAGE = "param_server"
from dynamic_reconfigure.parameter_generator_catkin import *

"""
this file contains the parameters used by ai, the current implementation requires 
the parameter to be defined in this file, as well as in dynamic_parameters.cpp
with the same parameter name

the value will be overriden by the external configuration, the value provided 
in dynamic_parameters will only be used when no other value has been set
"""

gen = ParameterGenerator() # create the parameter generator

#NOTE: format gen.add(name, type, level, description, default_value, min, max)
#min, max only apply for int/double types

#######################################################################
#                              NAVIGATOR                              #
#######################################################################

navigator_params = gen.add_group("Navigator")


navigator_params.add("default_avoid_dist", double_t, 0, "brief description", 50,  0, 100)
navigator_params.add("collision_avoid_velocity_scale", double_t, 0, "brief description", .5, 0,  1)
#add more navigator parameters here

#######################################################################
#                              EXAMPLES                               #
#######################################################################

example_params = gen.add_group("Examples")

example_params.add("string_example", str_t, 0,"An example string parameter", "Hello World")
example_params.add("int_example", int_t, 0, "An example int parameter", 50,  0, 100)
example_params.add("double_example", double_t, 0, "An example double parameter", 0.4,  0, 100)
example_params.add("bool_example", bool_t, 0, "An example bool parameter", True)


exit(gen.generate(PACKAGE, "param_server", "Params"))
