#!/usr/bin/env python
import os
import roslib

# namespace for the ParamsConfig msg (param_server::ParamsConfig)
PARAMS_CONFIG_NAMESPACE = "param_server"
# NODE_NAME can be anything, for internal use only 
NODE_NAME = "ps"
# NAME must be 'Params' as the auto-generated files 
# used in the `param_server` node have `Params` in the header file name
# ex. ParamsConfig.h, if its changed here, please change all respective imports
NAME = "Params"

from dynamic_reconfigure.parameter_generator_catkin import *

"""
This file contains the parameters used by ai, the current implementation requires 
the parameter to be defined in this file, as well as in dynamic_parameters.cpp
with the same parameter name

The default values in dynamic_parameters.cpp are overwritten by the values defined
here at runtime, the value provided in dynamic_parameters will only be used when 
the parameter is missing from the cfg file
"""

# TODO: Update 'brief description' for parameters
# 149: https://github.com/UBC-Thunderbots/Software/issues/149

gen = ParameterGenerator() # create the parameter generator
gen.add("robot_expiry_buffer_milliseconds", int_t, 0, "brief description", 50, 0, 100)

# NOTE: format gen.add(name, type, level, description, default_value, min, max)
# min, max only apply for int/double types
# for string and bool provide arguments up to and including default_value

#######################################################################
#                              NAVIGATOR                              #
#######################################################################

navigator_params = gen.add_group("Navigator")
navigator_params.add("default_avoid_dist", double_t, 0, "brief description", 50,  0, 100)
navigator_params.add("collision_avoid_velocity_scale", double_t, 0, "brief description", .5, 0,  1)
# add more navigator parameters here

#######################################################################
#                              PASSING                                #
#######################################################################

navigator_params = gen.add_group("Passing")
navigator_params.add("static_field_position_quality_x_offset", double_t, 0, "", 0.3, 0, 1)
navigator_params.add("static_field_position_quality_y_offset", double_t, 0, "", 0.3, 0, 1)
navigator_params.add("static_field_position_quality_friendly_goal_distance_weight", double_t, 0, "", 0.3, 0, 1)

#######################################################################
#                              EXAMPLES                               #
#######################################################################

# example_params_parent = gen.add_group("Examples parent")
# example_params = example_params_parent.add_group("Examples child")

# example_params.add("string_example", str_t, 0,"An example string parameter", "Hello World")
# example_params.add("int_example", int_t, 0, "An example int parameter", 50,  0, 100)
# example_params.add("double_example", double_t, 0, "An example double parameter", 0.4,  0, 100)
# example_params.add("bool_example", bool_t, 0, "An example bool parameter", True)

exit(gen.generate(PARAMS_CONFIG_NAMESPACE, NODE_NAME, NAME))
