#pragma once

#include <QGL>
#include <QGraphicsScene>
#include <QTableWidget>
#include <QOpenGLWidget>
#include <QWidget>

#include "gui/zoomable_qgraphics_view.h"
#include "util/parameter/parameter.h"
#include "ai/world/world.h"

// Forward declare the name of the top-level GUI class defined in main_widget.ui
namespace Ui
{
    class MainWidget;
}

/**
 * This class acts as a wrapper widget for all the autogenerated components
 * defined in main_widget.ui
 */
class MainWidget : public QWidget
{
    Q_OBJECT

   public:
    explicit MainWidget(QWidget* parent = 0);
    ~MainWidget();

   public slots:
    void drawAI(World world);
    void updateRobotStatusMessages();

   private:
    void setupSceneView(QGraphicsView* view, QGraphicsScene* scene, QOpenGLWidget* gl_widget);
    void setupStatusTable(QTableWidget* table);
    void setRobotStatus(QTableWidget* table, std::vector<std::string> robot_status_messages);
    void setupAIControls();
    void setupAIStartAndStopButtons();
    void setupTeamColourComboBox();
    void setupDefendingSideComboBox();
    void setupGameStateOverrideComboBox();
    void setupPlayOverrideComboBox();
    void setupParametersTab();
    QWidget* createBooleanParameter(std::shared_ptr<Parameter<bool>> parameter);
    QWidget* createIntegerParameter(std::shared_ptr<Parameter<int>> parameter);
    QWidget* createDoubleParameter(std::shared_ptr<Parameter<double>> parameter);
    QWidget* createStringParameter(std::shared_ptr<Parameter<std::string>> parameter);

    Ui::MainWidget* main_widget;
    QGraphicsScene* scene;
    QOpenGLWidget* glWidget;
    bool first_draw_call;
};
