syntax = "proto3";

// TODO consider sending VisionMsg and PrimitiveMsg over mcast
// instead of TbotsSoftwareMsg
message TbotsSoftwareMsg
{
    VisionMsg vision_msg       = 1;
    PrimitiveMsg primitive_msg = 2;
}

// TODO split into vision.proto after
// https://github.com/UBC-Thunderbots/Software/issues/1133
message VisionMsg
{
    // epoch timestamp of captured vision data
    uint64 timestamp = 1;

    // robot id to RobotDetection mapping
    map<uint32, RobotDetection> robot_detections = 2;

    // ball detection
    BallState ball_detection = 3;
}

message RobotState
{
    Point global_position    = 1;
    Angle global_orientation = 2;
}

// ballstate and robotstate
message BallState
{
    Point global_position = 1;
    Velocity finished     = 2;
}

// TODO split into geom.proto after
// https://github.com/UBC-Thunderbots/Software/issues/1133
message Point
{
    double x = 1;
    double y = 2;
}

message Velocity {}

message Angle
{
    double radians = 1;
}

message PrimitiveMsg
{
    // epoch timestamp when primitives were assigned
    uint64 timestamp = 1;

    // make note on wifi backend ticket
    // robot id to RadioPrimitive mapping
    map<uint32, RadioPrimitive> robot_primitive = 2;
}


// TODO split into primitive.proto after
// https://github.com/UBC-Thunderbots/Software/issues/1133
// TODO this is still called a RadioPrimitive because it doesn't make
message RadioPrimitive
{
    // A numeric ID representing the primitive for firmware
    FirmwarePrimitiveType prim_type = 1;

    // the parameters to be encoded into the packet
    double parameter1 = 2;
    double parameter2 = 3;
    double parameter3 = 4;
    double parameter4 = 5;

    // Extra bits used for flags and/or additional information
    uint32 extra_bits = 6;

    // Indicates whether the robot should move slowly (<1.5 m/s)
    bool slow = 7;
}

/*
 * This enum represents the IDs of the primitives implemented in firmware.
 *
 * TODO remove duplication w/ firmware_primitive_type.h and radio msgs once radio backend
 * is on proto https://github.com/UBC-Thunderbots/Software/issues/1216
 *
 */
enum FirmwarePrimitiveType
{
    /**
     * Stop Primitive
     *
     * The parameters are unused.
     *
     * The extra field is 0 for coasting or 1 for braking.
     */
    STOP = 0;

    /**
     * Move Primitive
     *
     * The parameters are the relative position, the relative orientation,
     * and the time delta.
     *
     * The extra field is 0 if the caller doesnâ€™t care about orientation,
     * or 1 if it does.
     */
    MOVE = 1;

    /**
     * Dribble Primitive
     *
     * The parameters are the relative position and orientation.
     *
     * The extra field is 0 if small kicks are prohibited or 1 if they are
     * allowed.
     */
    DRIBBLE = 2;

    /**
     * Shoot Primitive
     *
     * Note that in HL, this is split into kick and chip.
     *
     * The parameters are the relative position, relative orientation, and
     * power (either m/s or m).
     *
     * The extra field has bit 0 clear to kick or set to chip, and bit 1
     * set if the caller cares about orientation.
     */
    SHOOT = 3;

    /**
     * Catch Primitive
     *
     * The parameters are the velocity, dribble speed, and margin.
     */
    CATCH = 4;

    /**
     * Pivot Primitive
     *
     * The parameters are the relative centre point, the swing, and the
     * orientation.
     */
    PIVOT = 5;

    /**
     * Spin Primitive
     *
     * The parameters are the relative position and angular velocity.
     */
    SPIN = 6;

    /**
     * Specifies that direct control is in use and wheels are being
     * driven with individual power levels.
     */
    DIRECT_WHEELS = 7;

    /**
     * Specifies that direct control is in use and robot-relative
     * linear and angular velocities are being sent.
     */
    DIRECT_VELOCITY = 8;
};
