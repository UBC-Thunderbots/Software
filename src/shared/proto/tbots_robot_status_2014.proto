syntax = "proto2";

enum TbotsRobotMessage {
    //Electrical messages
    ROBOT_DEAD_MESSAGE                      = 1 ;
    LOW_CAP_MESSAGE                         = 2 ;
    LOW_BATTERY_MESSAGE                     = 3 ;
    HIGH_BOARD_TEMP_MESSAGE                 = 4 ;
    // Level triggered events
    CHARGE_TIMEOUT                          = 5 ;
    WHEEL_0_MOTOR_HOT                       = 6 ;
    WHEEL_1_MOTOR_HOT                       = 7 ;
    WHEEL_2_MOTOR_HOT                       = 8 ;
    WHEEL_3_MOTOR_HOT                       = 9 ;
    DRIBBLER_MOTOR_HOT                      = 10;
    WHEEL_0_ENCODER_NOT_COMMUTATING         = 11;
    WHEEL_1_ENCODER_NOT_COMMUTATING         = 12;
    WHEEL_2_ENCODER_NOT_COMMUTATING         = 13;
    WHEEL_3_ENCODER_NOT_COMMUTATING         = 14;
    WHEEL_0_HALL_SENSOR_STUCK_LOW           = 15;
    WHEEL_1_HALL_SENSOR_STUCK_LOW           = 16;
    WHEEL_2_HALL_SENSOR_STUCK_LOW           = 17;
    WHEEL_3_HALL_SENSOR_STUCK_LOW           = 18;
    DRIBBLER_HALL_SENSOR_STUCK_LOW          = 19;
    WHEEL_0_HALL_SENSOR_STUCK_HIGH          = 20;
    WHEEL_1_HALL_SENSOR_STUCK_HIGH          = 21;
    WHEEL_2_HALL_SENSOR_STUCK_HIGH          = 22;
    WHEEL_3_HALL_SENSOR_STUCK_HIGH          = 23;
    DRIBBLER_HALL_SENSOR_STUCK_HIGH         = 24;
    // Edge triggered events
    ICB_CRC_ERROR                           = 25;
    RECEIVE_FRAME_CHECK_SEQUENCE_FAILURE    = 26;
    CRASHED_CORE_DUMPED                     = 27;
    CRASHED_NO_CORE_DUMP                    = 28;
}

enum TbotsDongleMessage {
    ESTOP_BROKEN_MESSAGE = 1;
    RX_FCS_FAIL_MESSAGE  = 2;
    SECOND_DONGLE_MESSAGE = 3;
    TRANSMIT_QUEUE_FULL_MESSAGE = 4;
    RECEIVE_QUEUE_FULL_MESSAGE  = 5;
}

message TbotsRobotStatus2014 {
    // The maximum possible kick speed, in m/s.
    required double kick_speed_max = 1;

    // The kick resolution for HScale.
    required double kick_speed_resolution = 2;

    // The maximum possible chip distance, in m.
    required double chip_distance_max = 3;

    // The chip resolution for HScale.
    required double chip_distance_resolution = 4;

    // The maximum power level understood by the direct_dribbler function.
    required uint32 direct_dribbler_max = 5;

    // Whether or not the robot is currently responding to radio communication.
    required bool alive = 6;

    // Whether the robot is in direct mode.
    required bool direct_control = 7;

    // Whether or not the ball is interrupting the robot’s laser beam.
    required bool ball_in_beam = 8;

    // Whether or not the robot’s capacitor is charged enough to kick the ball.
    required bool capacitor_charged_enough_to_kick_ball = 9;

    // Indicates when autokick has been fired.
    required bool autokick_fired = 10;

    // The voltage on the robot’s battery, in volts.
    required double battery_voltage = 11;

    // voltage on the robot’s kicking capacitor, in volts.
    required double capacitor_voltage = 12;

    // The reading of the robot’s laser sensor.
    required double break_beam_reading = 13;

    // The maximum full-scale deflection (maximum possible reading) of the laser sensor.
    required double break_beam_scale = 14;

    // The temperature of the robot’s dribbler motor, in degrees Celsius.
    required double dribbler_temperature = 15;

    // The speed of the robot’s dribbler motor, in revolutions per minute.
    required int32 dribbler_speed = 16;

    // The temperature of the robot’s mainboard, in degrees Celsius.
    required double board_temperature = 17;

    // The link quality of the last received packet, from 0 (worst) to 1 (best).
    required double link_quality = 18;

    // The received signal strength of the last received packet, in decibels.
    required int32 received_signal_strength_db = 19;

    // Whether or nott the build ID information is valid.
    required bool build_ids_valid = 20;

    // The microcontroller firmware build ID.
    required uint32 fw_build_id = 21;

    // The FPGA bitstream build ID.
    required uint32 fpga_build_id = 22;

    // Messages related to the robot that are to be displayed in the visualizer
    repeated TbotsRobotMessage robot_messages = 23;

    // Messages that are related to the dongle itself
    repeated TbotsDongleMessage dongle_messages = 24;
}
