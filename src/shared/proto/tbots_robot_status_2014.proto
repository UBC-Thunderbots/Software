syntax = "proto2";

message Tbots_RobotStatus2014 {
    // The maximum possible kick speed, in m/s.
    required double kick_speed_max = 1;

    // The kick resolution for HScale.
    required double kick_speed_resolution = 2;

    // The maximum possible chip distance, in m.
    required double chip_distance_max = 3;

    // The chip resolution for HScale.
    required double chip_distance_resolution = 4;

    // The maximum power level understood by the direct_dribbler function.
    required uint32 direct_dribbler_max = 5;

    // Whether or not the robot is currently responding to radio communication.
    required bool alive = 6;

    // Whether the robot is in direct mode.
    required bool direct_control = 7;

    // Whether or not the ball is interrupting the robot’s laser beam.
    required bool ball_in_beam = 8;

    // Whether or not the robot’s capacitor is charged enough to kick the ball.
    required bool capacitor_charged_enough_to_kick_ball = 9;

    // Indicates when autokick has been fired.
    required bool autokick_fired = 10;

    // The voltage on the robot’s battery, in volts.
    required double battery_voltage = 11;

    // voltage on the robot’s kicking capacitor, in volts.
    required double capacitor_voltage = 12;

    // The reading of the robot’s laser sensor.
    required double break_beam_reading = 13;

    // The maximum full-scale deflection (maximum possible reading) of the laser sensor.
    required double break_beam_scale = 14;

    // The temperature of the robot’s dribbler motor, in degrees Celsius.
    required double dribbler_temperature = 15;

    // The speed of the robot’s dribbler motor, in revolutions per minute.
    required int32 dribbler_speed = 16;

    // The temperature of the robot’s mainboard, in degrees Celsius.
    required double board_temperature = 17;

    // The link quality of the last received packet, from 0 (worst) to 1 (best).
    required double link_quality = 18;

    // The received signal strength of the last received packet, in decibels.
    required int32 received_signal_strength_db = 19;

    // Whether or nott the build ID information is valid.
    required bool build_ids_valid = 20;

    // The microcontroller firmware build ID.
    required uint32 fw_build_id = 21;

    // The FPGA bitstream build ID.
    required uint32 fpga_build_id = 22;
}
