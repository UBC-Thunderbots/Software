# This file provides an example for how to define a config file, including examples
# of all parameter types, special attributes, and how to include other configs
#
# Parameter schema
#
# type:
#   name:
#   value:
#   description:
#   other attributes...
#
# Notes:
# - All 'name' attributes must be unique per-file
# - All 'name' attribute values should be snake_case. Spaces are not allowed.
# - All config file names must be unique, and should be named CamelCase.yaml

#########################################################################################
# The following are example of every type of parameter that can be used
#########################################################################################

- bool:
    name: example_bool_param
    value: true
    description: >
      Can be true or false
- int:
    name: example_bool_param
    min: 0
    max: 5
    value: 3
    description: >
      Can be any integer value in the range [min, max]
- uint:
    name: example_unsigned_int_param
    min: 0 # Must be >= 0
    max: 5
    value: 3
    description: >
      Can be any integer value in the range [min, max].
      The minimum value must be >= 0
- float:
    name: example_float_param
    min: 1.1
    max: 9.01
    value: 4.04
    description: >
      Can be any value in the range [min, max]
- double:
    name: example_double_param
    min: 0
    max: 5.4
    value: 0.2
    description: >
      Can be any value in the range [min, max]

      Will not be generated for C code, because we assume that is firmware code
      that cannot represent doubles.
- string:
    name: example_string_param
    value: "Hello World"
    description: >
      Any string value
- enum:
    name: example_enum_param
    enum: RefboxGameState
    value: HALT
    description: >
      Accepts enum values from the specified enum. For example if there was an enum defined as

      enum TeamColour {
        YELLOW,
        BLUE
      }

      Then this parameter would only accept TeamColour.YELLOW and TeamColour.BLUE as valid values.

      The target that builds/defines the enum must be included in the enum_deps attribute
      of the bazel rule (otherwise compilation should fail).

      Will only generate for CPP code.
- factory:
    name: example_factory_param
    index_type: std::string
    type_to_create: Play
    value: "HaltPlay"
    description: >
      Accepts all registered IndexType values for the GenericFactory<index_type, type_to_create>.

      For example, if there was a GenericFactory<std::string, Play> with 3 entries registered
      as ("Stop", "Defense", "Offense"), then this parameter would only accept
      "Stop", "Defense", and "Offense" as valid values.

      Will only generate for CPP code.

#########################################################################################
# The following are example of special attributes that can be applied to any parameter
#########################################################################################
-
# Make a parameter value optional (CPP only)
- bool:
    name: example_optional_parameter
    value: false
    optional: true
    description: >
      Optional parameters will generate with std::optional as their value return type.
      They can accept std::nullopt as a value. If optional is not specified, it is
      assumed to be false.

      Will only generate for CPP code.
# Make a parameter a constant value
- int:
    name: example_const_parameter
    min: 0
    max: 255
    value: 50
    const: true
    description: >
      Parameters with the const attribute do not generate with an API to change their values.
      They are constants. If const is not specified, it is assumed to be false.

      Only parameters that are marked as const will be generated for C code. We assume
      that C code is firmware that we cannot change at runtime because it is running
      on the robots (not the main AI computer).

#########################################################################################
# The following are examples of how to include other configs
#########################################################################################
# Config files can include other configs. This is how the parameter hierarchy is built
# up, and allows us to share parameters between configs. For example, this makes it
# easy to define some passing parameters in one location, and share those parameters
# with the subset of Plays that need them.
#
# All that needs to be specified is the name the config will be reference as, and the
# path to the file to include. The include paths follow the same concepts at Bazel:
# - Files in the same directory can be specified with a colon preceding the filename
#   Eg. include: ":SomeFile.yaml"
# - Otherwise, the absolute filepath relative to the root of the config directory
#   (ie. the top-level directory containing all the config files) must be provided.
#   The name of the file to be included must be the last component of the path, and
#   separated by a colon.
#   Eg. include: "Config/examples:Example.yaml"
#
# In the generated code, included configs and their attributes can be accessed by
# the name of the included config.
# Eg. example_included_config_in_the_same_directory.foo_bool

- config:
    name: example_included_config_in_the_same_directory
    path: ":Foo.yaml"
- config:
    name: example_included_config_with_absolute_path
    path: "config/examples:Foo.yaml"
