# Examples and descriptions of all Parameter types that can be used
AllValidParameterTypes:
  BoolParam:
    type: bool
    value: true
    description: >
      Can be true or false
  IntParam:
    type: int
    min: 0
    max: 5
    value: 3
    description: >
      Can be any integer value in the range [min, max]
  UnsignedIntParam:
    type: uint
    min: 0 # Must be >= 0
    max: 5
    value: 3
    description: >
      Can be any integer value in the range [min, max].
      The minimum value must be >= 0
  FloatParam:
    type: float
    min: 1.1
    max: 9.01
    value: 4.04
    description: >
      Can be any value in the range [min, max]
  DoubleParam:
    type: double
    min: 0
    max: 5
    value: 0.2
    description: >
      Can be any value in the range [min, max].
      Will not be generated for C code, because we assume that is firmware code
      that cannot represent doubles.
  StringParam:
    type: string
    value: "Hello World"
    description: >
      Any string value
  EnumParam:
    type: enum
    enum: RefboxGameState
    value: HALT
    description: >
      Accepts enum values from the specified enum.
      The target that builds/defines the enum must be included in the enum_deps attribute
      of the bazel rule (otherwise compilation should fail).
      Will only generate for CPP output.
  # Example of using the play factory
  # Because we only really care about the available IndexType values, this may be
  # better named as type: registry
  FactoryParam:
    type: factory
    IndexType: std::string
    TypeToCreate: Play
    value: "HaltPlay"
    description: >
      Accepts all registered IndexType values for the GenericFactory<IndexType, TypeToCreate>.
      Exact technical implementation regarding includes TBD, but should be possible based
      on success of enum experiments.
      Will only generate for CPP output.

# Examples and descriptions of special Parameter attributes
SpecialParameterAttributesExamples:
  OptionalParameter:
    type: enum
    enum: TeamColour
    value: BLUE
    optional: true
    description: >
      Optional params will generate with std::optional as their value return type.
      They can accept std::nullopt as a value. If optional is not specified, it is
      assumed to be false.

      Can only be generated for CPP.
  ConstParameter:
    type: int
    min: 0
    max: 255
    value: 50
    const: true
    description: >
      Parameters with the const attribute do not generate with an API to change their values.
      They are constants. If const is not specified, it is assumed to be true.

      Only parameters that are marked constant will be able to be generated for C code.
# A full example of what a config may look like
ExampleConfig:
  ExampleParam1:
    type: bool
    value: false
    description: >
      some parameter
  ExampleParam2:
    type: bool
    value: true
    const: true
    description: >
      another parameter
  NestedConfig:
    NestedParam:
      type: bool,
      value: false
      optional: true
      description: >
        Configs can contain other configs with additional parameters
  # Configs can also include other configs using their relative filepath combined with the path
  # inside the config file (to access nested configs).
  # This will give this config access to the included config in the generated code
  include: ../foo/bar/SomeOtherConfig
