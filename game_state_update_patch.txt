diff --git a/src/software/ai/hl/stp/stp.cpp b/src/software/ai/hl/stp/stp.cpp
index b1298028..e6745a0b 100644
--- a/src/software/ai/hl/stp/stp.cpp
+++ b/src/software/ai/hl/stp/stp.cpp
@@ -36,26 +36,6 @@ void STP::updateSTPState(const World& world)
 void STP::updateGameState(const World& world)
 {
     current_game_state = world.gameState();
-    if (control_config->OverrideRefereeCommand()->value())
-    {
-        std::string previous_state_string =
-            control_config->PreviousRefereeCommand()->value();
-        std::string current_state_string =
-            control_config->CurrentRefereeCommand()->value();
-        try
-        {
-            RefereeCommand previous_state =
-                fromStringToRefereeCommand(previous_state_string);
-            current_game_state.updateRefereeCommand(previous_state);
-            RefereeCommand current_state =
-                fromStringToRefereeCommand(current_state_string);
-            current_game_state.updateRefereeCommand(current_state);
-        }
-        catch (std::invalid_argument e)
-        {
-            LOG(WARNING) << e.what();
-        }
-    }
 }
 
 void STP::updateAIPlay(const World& world)
diff --git a/src/software/gui/full_system/widgets/ai_control.cpp b/src/software/gui/full_system/widgets/ai_control.cpp
index ea4193e9..81702482 100644
--- a/src/software/gui/full_system/widgets/ai_control.cpp
+++ b/src/software/gui/full_system/widgets/ai_control.cpp
@@ -24,9 +24,9 @@ void setupAIControls(Ui::AutogeneratedFullSystemMainWidget *widget,
         config->getMutableSensorFusionConfig()->mutableDefendingPositiveSide());
     setupGameStateOverrideComboBox(
         widget->gamestate_override_combo_box,
-        config->getMutableAIControlConfig()->mutableOverrideRefereeCommand(),
-        config->getMutableAIControlConfig()->mutablePreviousRefereeCommand(),
-        config->getMutableAIControlConfig()->mutableCurrentRefereeCommand());
+        config->getMutableSensorFusionConfig()->mutableOverrideRefereeCommand(),
+        config->getMutableSensorFusionConfig()->mutablePreviousRefereeCommand(),
+        config->getMutableSensorFusionConfig()->mutableCurrentRefereeCommand());
     setupPlayOverrideComboBox(
         widget->play_override_combo_box,
         config->getMutableAIControlConfig()->mutableOverrideAIPlay(),
diff --git a/src/software/parameter/config/ai_control.yaml b/src/software/parameter/config/ai_control.yaml
index 8435edee..b9ef60a9 100644
--- a/src/software/parameter/config/ai_control.yaml
+++ b/src/software/parameter/config/ai_control.yaml
@@ -30,25 +30,3 @@ AIControlConfig:
         - "ShootOrChip Play"
     description: >-
         Specifies the ai play that should be in use
-  OverrideRefereeCommand:
-    type: "bool"
-    default: true
-    description: >-
-        Overrides the current referee command with the play 
-        specified by CurrentRefereeCommand and PreviousRefereeCommand
-        parameter
-  CurrentRefereeCommand:
-    type: "std::string"
-    default: "HALT"
-    description: >-
-        Specifies the referee command that should be in use
-  PreviousRefereeCommand:
-    type: "std::string"
-    default: "HALT"
-    description: >-
-        Specifies the previous referee command to correctly set up 
-        the referee command state machine when overriding the referee command.
-        For example, if `PREPARE_KICKOFF_US` followed by `NORMAL_START`, 
-        then `isOurRestart()` will be `true`, while 
-        `PREPARE_KICKOFF_THEM` followed by `NORMAL_START` will set 
-        `isOurRestart()` to `false`
diff --git a/src/software/parameter/config/sensor_fusion.yaml b/src/software/parameter/config/sensor_fusion.yaml
index 20460991..b0f7dbfa 100644
--- a/src/software/parameter/config/sensor_fusion.yaml
+++ b/src/software/parameter/config/sensor_fusion.yaml
@@ -68,3 +68,25 @@ SensorFusionConfig:
     description: >-
       Overrides the enemy goalie id provided by the game controller,
       with EnemyGoalieId parameter
+  OverrideRefereeCommand:
+    type: "bool"
+    default: true
+    description: >-
+        Overrides the current referee command with the play 
+        specified by CurrentRefereeCommand and PreviousRefereeCommand
+        parameter
+  CurrentRefereeCommand:
+    type: "std::string"
+    default: "HALT"
+    description: >-
+        Specifies the referee command that should be in use
+  PreviousRefereeCommand:
+    type: "std::string"
+    default: "HALT"
+    description: >-
+        Specifies the previous referee command to correctly set up 
+        the referee command state machine when overriding the referee command.
+        For example, if `PREPARE_KICKOFF_US` followed by `NORMAL_START`, 
+        then `isOurRestart()` will be `true`, while 
+        `PREPARE_KICKOFF_THEM` followed by `NORMAL_START` will set 
+        `isOurRestart()` to `false`
diff --git a/src/software/sensor_fusion/sensor_fusion.cpp b/src/software/sensor_fusion/sensor_fusion.cpp
index ec17b623..472d9076 100644
--- a/src/software/sensor_fusion/sensor_fusion.cpp
+++ b/src/software/sensor_fusion/sensor_fusion.cpp
@@ -82,6 +82,28 @@ void SensorFusion::updateWorld(const SSLProto::SSL_GeometryData &geometry_packet
 
 void SensorFusion::updateWorld(const SSLProto::Referee &packet)
 {
+    if (sensor_fusion_config->OverrideRefereeCommand()->value())
+    {
+        std::string previous_state_string =
+            sensor_fusion_config->PreviousRefereeCommand()->value();
+        std::string current_state_string =
+            sensor_fusion_config->CurrentRefereeCommand()->value();
+        try
+        {
+            RefereeCommand previous_state =
+                fromStringToRefereeCommand(previous_state_string);
+            game_state.updateRefereeCommand(previous_state);
+            RefereeCommand current_state =
+                fromStringToRefereeCommand(current_state_string);
+            game_state.updateRefereeCommand(current_state);
+        }
+        catch (std::invalid_argument e)
+        {
+            LOG(WARNING) << e.what();
+        }
+        return;
+    }
+
     // TODO remove DynamicParameters as part of
     // https://github.com/UBC-Thunderbots/Software/issues/960
     if (sensor_fusion_config->FriendlyColorYellow()->value())
diff --git a/src/software/simulated_tests/simulated_test_fixture.cpp b/src/software/simulated_tests/simulated_test_fixture.cpp
index 21b865ca..2324a7c0 100644
--- a/src/software/simulated_tests/simulated_test_fixture.cpp
+++ b/src/software/simulated_tests/simulated_test_fixture.cpp
@@ -102,13 +102,13 @@ void SimulatedTestFixture::setRefereeCommand(
     const RefereeCommand &current_referee_command,
     const RefereeCommand &previous_referee_command)
 {
-    MutableDynamicParameters->getMutableAIControlConfig()
+    MutableDynamicParameters->getMutableSensorFusionConfig()
         ->mutableOverrideRefereeCommand()
         ->setValue(true);
-    MutableDynamicParameters->getMutableAIControlConfig()
+    MutableDynamicParameters->getMutableSensorFusionConfig()
         ->mutableCurrentRefereeCommand()
         ->setValue(toString(current_referee_command));
-    MutableDynamicParameters->getMutableAIControlConfig()
+    MutableDynamicParameters->getMutableSensorFusionConfig()
         ->mutablePreviousRefereeCommand()
         ->setValue(toString(previous_referee_command));
 }
